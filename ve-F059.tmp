#include "StdAfx.h"
#include "CmdRun.h"
#include "MainFrm.h"
#include "TSCtrlSys.h"
#include "DlgManualAlign.h"
#include <math.h>

#define KGB_PI_HALF	1.5707963
#define KGB_PI		3.1415926
#define KGB_2PI		6.2831852
#pragma   warning(disable:4244)

CWinThread *g_pRunThread = NULL;
CWinThread *g_pHomeThread = NULL;
CWinThread *g_pTestRunThread = NULL;
CWinThread *g_pImageRunThread = NULL;
CWinThread *g_pValveResetThread = NULL;
CWinThread *g_pPadDetectThread = NULL;

UINT RunThread(LPVOID param)
{
	CCmdRun *p = (CCmdRun *)param;
	p->AddMsg("开始运行");
	p->Run();
	p->AddMsg("结束运行");
	return 0;
}

UINT TestRunThread(LPVOID param)
{
	CCmdRun *p = (CCmdRun *)param;
	p->m_bTestRunStop = false;
	while(!p->m_bTestRunStop)
	{
		p->TestRun();
	}
	return 0;
}

UINT CCmdRun::ThreadHome(LPVOID lparam)
{
	CCmdRun *p = (CCmdRun *)lparam;
	p->Home();
	return 0;
}

UINT CCmdRun::ThreadTestImage(LPVOID lparam)
{
	CCmdRun *p = (CCmdRun *)lparam;
	p->TestImage();
	return 0;
}

UINT CCmdRun::ThreadValveReset(LPVOID lparam)
{
	CCmdRun *p = (CCmdRun *)lparam;
	p->ValveReset();
	return 0;
}

UINT CCmdRun::ThreadDetect(LPVOID lparam)
{
	CCmdRun *p = (CCmdRun *)lparam;
	p->PadDetect();
	return 0;
}

CCmdRun::CCmdRun(void)
{
	m_pMv = NULL;
	m_pListBox = NULL;
	m_tStatus = K_RUN_STS_NONE;
	m_dRotateAngle = 0.0;

	PDposting=NULL;
	m_pPadDetect = NULL;
	m_pTransitionDetect = NULL;
	m_nPadNumber = 0;
	nTempCount=0;
	RunErrorID=-1;
	//StautDisp.W_Count=0;
	StautDisp.W_UPH=0.0;
	StautDisp.W_SingeTimer=0.0;
	m_StarT = m_EndT = CTime::GetCurrentTime();

	DisCompCount=0;
	m_nDetectImageIndex = 0;

	ManalRun=true;
	V9RestOK=false;
	AutoRunCp=false;
	V9DotRest=false;
	m_bV9FirstDisp = false;
	m_bFirstDisp = false;
	m_bIsPause = false;
	m_bTestRunStop = true;
	m_bRepair = false;
	m_bIsSupend = false;
	m_bRefresh = false;
	m_bValveReset = false;
	m_bStartRun = true;
	m_bDispenseSuccess = false;

	m_bCleanNeedle = false;
	m_bTestDispense = false;
	m_bDischarge = false;
	m_bSearchMark = false;
	m_bSlotDetect = false;
	m_bHoming = false;
	m_bMeasureHeight = false;
	m_bImageUse = false;

	dTempValue1 = dTempValue2 = 0.0;
	dTempDelay = 0.0;

	m_bRunLock = false;
	for(int i=0;i<3;i++)
	{
		m_bValveSelect[i] = true;
	}
	m_bPlcRunError = false;
}

CCmdRun::~CCmdRun(void)
{
	if (PDposting!=NULL)
	{
		delete[] PDposting;
		PDposting = NULL;
	}

	if(m_pTransitionDetect!=NULL)
	{
		delete[] m_pTransitionDetect;
		m_pTransitionDetect = NULL;
	}

	if(m_pPadDetect!=NULL)
	{
		delete[] m_pPadDetect;
		m_pPadDetect = NULL;
	}

	TRACE(_T("g_pHomeThread Exit begin\n"));
	if(g_pHomeThread != NULL)
	{
		switch( WaitForSingleObject(g_pHomeThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pHomeThread->m_hThread, 0);
			break;
		}

		g_pHomeThread = NULL;
	}
	TRACE(_T("g_pHomeThread Exit Ok\n"));

	TRACE(_T("g_pRunThread Exit begin\n"));
	if(g_pRunThread != NULL)
	{
		switch( WaitForSingleObject(g_pRunThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pRunThread->m_hThread, 0);
			break;
		}

		g_pRunThread = NULL;
	}
	TRACE(_T("g_pRunThread Exit Ok\n"));

	TRACE(_T("g_pTestRunThread Exit begin\n"));
	if(g_pTestRunThread != NULL)
	{
		switch( WaitForSingleObject(g_pTestRunThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pTestRunThread->m_hThread, 0);
			break;
		}

		g_pTestRunThread = NULL;
	}
	TRACE(_T("g_pTestRunThread Exit Ok\n"));

	TRACE(_T("g_pImageRunThread Exit begin\n"));
	if(g_pImageRunThread != NULL)
	{
		switch( WaitForSingleObject(g_pImageRunThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pImageRunThread->m_hThread, 0);
			break;
		}
		g_pImageRunThread = NULL;
	}
	TRACE(_T("g_pImageRunThread Exit Ok\n"));

	TRACE(_T("g_pValveResetThread Exit begin\n"));
	if(g_pValveResetThread != NULL)
	{
		switch( WaitForSingleObject(g_pValveResetThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pValveResetThread->m_hThread, 0);
			break;
		}
		g_pValveResetThread = NULL;
	}
	TRACE(_T("g_pValveResetThread Exit Ok\n"));

	TRACE(_T("g_pPadDetectThread Exit begin\n"));
	if(g_pPadDetectThread != NULL)
	{
		switch( WaitForSingleObject(g_pPadDetectThread->m_hThread, 500) )
		{
		case WAIT_OBJECT_0:
			break;
		case WAIT_TIMEOUT:
			TerminateThread(g_pPadDetectThread->m_hThread, 0);
			break;
		}
		g_pPadDetectThread = NULL;
	}
	TRACE(_T("g_pPadDetectThread Exit Ok\n"));
}

void CCmdRun::Create(GTS400Ex *pMv, CListBox *pListBox, CLogFile *pLog)
{
	m_pMv = pMv;
	m_pListBox = pListBox;
	m_pLog = pLog;
}
// 输出信息
void CCmdRun::AddMsg(CString strText)
{
	if(m_pListBox != NULL)
	{
		if(m_pListBox->GetCount()>3000)
		{
			m_pListBox->ResetContent();
		}
		CString strTemp;
		strTemp.Format("%04d: ", m_pListBox->GetCount());
		m_pListBox->AddString(strTemp + strText);
		m_pListBox->SetCurSel(m_pListBox->GetCount()-1);
	}
}
// 运行线程
void CCmdRun::RunThreadPlay()
{
	//if(g_pFrm->bIsAlignDlgVisible||g_pFrm->bIsCalibVisible||g_pFrm->bIsCustomVisible||
	//	g_pFrm->bIsDebugHeightVisible||g_pFrm->bIsDebugNeedleVisible||g_pFrm->bIsRCDDlgVisible)
	//{
	//	RunErrorID = 33;
	//	AfxMessageBox("请关闭对话框，在启动自动运行！");
	//	return;
	//}
	if(g_pFrm->bAutoDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAutoAlign.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bAutoDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bImagePosVisible)
	{
		::SendMessage(g_pFrm->m_dlgImagePos.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bImagePosVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsAlignDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAlignNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsAlignDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCalibVisible)
	{
		::SendMessage(g_pFrm->m_dlgCalibration.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCalibVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCustomVisible)
	{
		::SendMessage(g_pFrm->m_dlgCustom.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCustomVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugHeightVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugHeightVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugNeedleVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugNeedleVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsRCDDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgRCD.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsRCDDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCtrlDlgVisible)
	{
		//g_pFrm->m_dlgCtrl.OnDlgExit();
		::SendMessage(g_pFrm->m_dlgCtrl.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCtrlDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->IsV9SetDlgVisible)
	{
		//g_pFrm->m_V9Param.OnV9SetExit();
		::SendMessage(g_pFrm->m_V9Param.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->IsV9SetDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsNeedleDlgVisible)
	{
		//g_pFrm->m_dlgNeedle.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsNeedleDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsHeightDlgVisible)
	{
		//g_pFrm->m_dlgHeight.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsHeightDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(m_tStatus == K_RUN_STS_RUN||m_bHoming)
	{
		return;
	}
	if(m_tStatus == K_RUN_STS_PAUSE)
	{
		m_tStatus = K_RUN_STS_RUN;
		return;
	}
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		CString strError;
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能运行！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能运行！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能运行！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能运行！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能运行！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能运行！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能运行！");
		}
		m_pLog->log(strError);
		RunErrorID = 33;
		AfxMessageBox("设备正进行其他操作，请复位后重新启动！");
		return;
	}
	//g_pView->m_ImgStatic.Stop();
	g_pRunThread=AfxBeginThread(RunThread, this);
	if(g_pRunThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("线程创建失败.");
		return;
	}
	return;
}
// 测试线程
void CCmdRun::RunThreadTest()
{
	//if(g_pFrm->bIsAlignDlgVisible||g_pFrm->bIsCalibVisible||g_pFrm->bIsCustomVisible||
	//	g_pFrm->bIsDebugHeightVisible||g_pFrm->bIsDebugNeedleVisible||g_pFrm->bIsRCDDlgVisible)
	//{
	//	RunErrorID = 33;
	//	AfxMessageBox("请关闭对话框，在启动自动运行！");
	//	return;
	//}
	if(g_pFrm->bAutoDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAutoAlign.m_hWnd,WM_CLOSE,0,0);

		while(g_pFrm->bAutoDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bImagePosVisible)
	{
		::SendMessage(g_pFrm->m_dlgImagePos.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bImagePosVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsAlignDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAlignNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsAlignDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCalibVisible)
	{
		::SendMessage(g_pFrm->m_dlgCalibration.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCalibVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCustomVisible)
	{
		::SendMessage(g_pFrm->m_dlgCustom.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCustomVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugHeightVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugHeightVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugNeedleVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugNeedleVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsRCDDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgRCD.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsRCDDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCtrlDlgVisible)
	{
		//g_pFrm->m_dlgCtrl.OnDlgExit();
		::SendMessage(g_pFrm->m_dlgCtrl.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCtrlDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->IsV9SetDlgVisible)
	{
		//g_pFrm->m_V9Param.OnV9SetExit();
		::SendMessage(g_pFrm->m_V9Param.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->IsV9SetDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsNeedleDlgVisible)
	{
		//g_pFrm->m_dlgNeedle.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsNeedleDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsHeightDlgVisible)
	{
		//g_pFrm->m_dlgHeight.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsHeightDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(m_tStatus == K_RUN_STS_RUN||m_bHoming)
	{
		return;
	}
	if(m_tStatus == K_RUN_STS_PAUSE)
	{
		m_tStatus = K_RUN_STS_RUN;
		return;
	}
	g_pTestRunThread=AfxBeginThread(TestRunThread,this);
	if(g_pTestRunThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("测试线程创建失败.");
		return;
	}
	return;
}
// 图像测试
void CCmdRun::RunThreadTestImage()
{
	g_pImageRunThread = AfxBeginThread(CCmdRun::ThreadTestImage,this);
	if(g_pImageRunThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("图像线程创建失败.");
		return;
	}
}

void CCmdRun::RunThreadValveReset()
{
	g_pValveResetThread = AfxBeginThread(CCmdRun::ThreadValveReset,this);
	if(g_pValveResetThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("阀体复位线程创建失败.");
		return;
	}
}

void CCmdRun::RunThreadDetect()
{
	g_pPadDetectThread = AfxBeginThread(CCmdRun::ThreadDetect,this);
	if(g_pPadDetectThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("颗粒检测线程创建失败！");
		return;
	}
}
// 暂停
void CCmdRun::Pause()
{
	m_tStatus = K_RUN_STS_PAUSE;
}
// 停止
void CCmdRun::Stop()
{
	if (m_tStatus == K_RUN_STS_NONE)
	{
		return;
	}

	//m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,TRUE);
	m_pMv->ListStop();
	if(!m_pMv->ListWaitStop())
	{
		RunErrorID = 31;
		m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		AfxMessageBox("运动停止失败！");
	}

	if(m_tStatus!=K_RUN_STS_EMERGENCY)
	{
		m_tStatus = K_RUN_STS_STOP;//发送停止信号后一定要退出运行指令
	}
	Sleep(100);
	if(!SetAxisProfile(MEDIUM_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("设置坐标轴速度失败！");
	}
	//m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,FALSE);	
}
// 运行停止
void CCmdRun::RunStop()
{
	g_pFrm->m_CmdRun.ManalRun = true;
	g_pFrm->m_CmdRun.m_tStatus = K_RUN_STS_STOP;
}
// 急停
void CCmdRun::Emergency()
{
	m_tStatus = K_RUN_STS_EMERGENCY;//点胶机
	Stop();
	//m_pMv->StopMove();//上下料电机停止
	//m_pMv->StopMove();//上下料电机停止
	//m_tStatus = K_RUN_STS_EMERGENCY;//点胶机
	AddMsg("--->紧急停止----");
}
// 指示灯设置
void CCmdRun::SetLamp()
{
	if(m_pMv == NULL)return;
	m_pMv->SetOutput(theApp.m_tSysParam.outGreen, m_tStatus ==K_RUN_STS_RUN &&!g_pFrm->m_wndPosInfo.PlcEorrTag&&RunErrorID ==-1);
	m_pMv->SetOutput(theApp.m_tSysParam.outYellow, m_tStatus ==K_RUN_STS_STOP&&!g_pFrm->m_wndPosInfo.PlcEorrTag&&RunErrorID ==-1 );
	if(m_pMv->GetOutput(theApp.m_tSysParam.outRed))
	{
		m_pMv->SetOutput(theApp.m_tSysParam.outRed,FALSE);
	}
	else
	{
		m_pMv->SetOutput(theApp.m_tSysParam.outRed, m_tStatus ==K_RUN_STS_EMERGENCY ||m_bIsSupend||g_pFrm->m_wndPosInfo.PlcEorrTag||RunErrorID >=0);
	}
}
// 是否退出运行
BOOL CCmdRun::IsExitRun()
{
	if(m_tStatus == K_RUN_STS_STOP||m_tStatus == K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bFirstDisp = false;
		m_bTestRunStop = true;
		Stop();
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

bool CCmdRun::RunSingleDot(double x,double y,double z,bool RunDot_RestV9)
{
	CString str;
	m_bDispenseSuccess = false;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(m_bRepair||m_bFirstDisp)
	{
		if(!SynchronizeMoveXY(x,y,true))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
	}
	else
	{
		if(!SynchronizeMoveXY(x,y,false))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
		if(!WaitStopXY(10000))
		{
			return false;
		}
	}
	if(!SynchronizeMoveZ(z,true))
	{
		return false;
	}
	//if(m_bFirstDisp)
	//{
	//	CFunction::DelayEx(ProductParam.dFirstDispDelay);
	//	m_bFirstDisp = false;
	//}
	if(!CTimeUtil::Delay(long(ProductParam.dPreTime*1000)))
	{
		str.Format("Delay(ProductParam.dPreTime) = false");
		m_pLog->log(str);
	}
	if(!ProductParam.DispMode)//出胶模式
	{						
		if(theApp.m_V9Control.V9C_Dot(K_SELECT_AXIS,false))
		{
			V9DotRest = TRUE;
		}
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if(m_bFirstDisp)
	{
		if(!CTimeUtil::Delay(long(ProductParam.dFirstDispDelay*1000)))
		{
			str.Format("Delay(ProductParam.dFirstDispDelay) = false");
			m_pLog->log(str);
		}
		m_bFirstDisp = false;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	if(!CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000)))
	{
		str.Format("Delay(ProductParam.dPostDisTime) = false");
		m_pLog->log(str);
	}
	//if(IsExitRun())
	//{
	//	MoveToZSafety();
	//	return false;
	//}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	//if(IsExitRun())
	//{
	//	MoveToZSafety();
	//	return false;
	//}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
	{
		return false;
	}
	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID=30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID=30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::RunSingleDot(double x,double y,double z,double dCircleRadius,double dCircleDistance,bool RunDot_RestV9)
{
	m_bDispenseSuccess = false;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(m_tStatus == K_RUN_STS_STOP)
	{
		if(IsExitRun())
		{
			MoveToZSafety();
			return false;
		}
	}
	double totalLength = 0;
	double dTemp = dCircleRadius;
	double dRadius = 0.0;
	while(dTemp-dCircleDistance>0.1)
	{
		dRadius = dTemp;
		totalLength += 2*KGB_PI*dTemp*(1+ProductParam.dCompAngle/360);
		dTemp -= dCircleDistance;
	}
	if(!ProductParam.DispMode)
	{
		theApp.m_V9Control.V9_RunCount++;
	}
	if(m_bRepair||m_bFirstDisp)
	{
		if(!SynchronizeMoveXY(x,y,true))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
	}
	else
	{
		if(!SynchronizeMoveXY(x,y,false))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
		if(!WaitStopXY(10000))
		{
			return false;
		}
	}
	if(!SynchronizeMoveZ(z,true))
	{
		return false;
	}
	while(dCircleRadius-dCircleDistance>0.1)
	{
		m_pMv->ListAddLine(x-dCircleRadius,y,ProductParam.CircleVel,ProductParam.CircleAcc);
		if(!ProductParam.DispMode)
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					if((VALVE_M9==theApp.m_tSysParam.ValveType)||(VALVE_L9==theApp.m_tSysParam.ValveType))
					{
						m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius)/totalLength);
					}
					else if(VALVE_H9==theApp.m_tSysParam.ValveType)
					{
						m_pMv->AddBufGear(K_AXIS_U+i,-g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius)/totalLength);
					}
				}
			}
		}
		m_pMv->ListAddArc(x-dCircleRadius,y,dCircleRadius,0,0,ProductParam.CircleVel,ProductParam.CircleAcc);
		if(!ProductParam.DispMode)
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					if((VALVE_M9==theApp.m_tSysParam.ValveType)||(VALVE_L9==theApp.m_tSysParam.ValveType))
					{
						m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius*(ProductParam.dCompAngle/360.0))/totalLength);
					}
					else if(VALVE_H9==theApp.m_tSysParam.ValveType)
					{
						m_pMv->AddBufGear(K_AXIS_U+i,-g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius*(ProductParam.dCompAngle/360.0))/totalLength);
					}
				}
			}
		}
		m_pMv->ListAddArc(x-dCircleRadius*cos(ProductParam.dCompAngle/180.0*KGB_PI),y+dCircleRadius*sin(ProductParam.dCompAngle/180.0*KGB_PI),ProductParam.dCompAngle<180?dCircleRadius:-dCircleRadius,0,ProductParam.CircleVel,ProductParam.CircleAcc);
		dCircleRadius -= dCircleDistance;
	}
	if(!m_pMv->AllListRun())
	{
		RunErrorID=15;
		m_tStatus = K_RUN_STS_STOP;
		AddMsg("运动缓冲区运动失败！");
		return false;
	}
	if(!ProductParam.DispMode)
	{
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000));
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID=30;
		AfxMessageBox("插补运动后：设定速度失败！");
		return false;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		RunErrorID=30;
		AfxMessageBox("阀体设置参数错误！");
		return false;
	}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	//if(IsExitRun())
	//{
	//	MoveToZSafety();
	//	return false;
	//}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
	{
		return false;
	}

	int nCount = V9Parm[0].DispCount;
	for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
	{
		if(nCount>=V9Parm[i].DispCount)
		{
			nCount = V9Parm[i].DispCount;
		}
	}
	if(theApp.m_V9Control.V9_RunCount>=nCount)
	{
		V9DotRest=true;
	}
	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID=30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID=30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::RunSingleDot(double x,double y,double z,double dLength,bool bVertical,int DisBufCout,bool RunDot_RestV9)
{
	m_bDispenseSuccess = false;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(m_tStatus == K_RUN_STS_STOP)
	{
		if(IsExitRun())
		{
			MoveToZSafety();
			return false;
		}
	}
	if(bVertical)
	{
		if(m_bRepair||m_bFirstDisp)
		{
			if(!SynchronizeMoveXY(x,y-dLength/2,true))
			{
				return false;
			}
			if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
			{
				return false;
			}
		}
		else
		{
			if(!SynchronizeMoveXY(x,y-dLength/2,false))
			{
				return false;
			}
			if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
			{
				return false;
			}
			if(!WaitStopXY(10000))
			{
				return false;
			}
		}
		if(!SynchronizeMoveZ(z,true))
		{
			return false;
		}
	}
	else
	{
		if(m_bRepair||m_bFirstDisp)
		{
			if(!SynchronizeMoveXY(x-dLength/2,y,true))
			{
				return false;
			}
			if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
			{
				return false;
			}
		}
		else
		{
			if(!SynchronizeMoveXY(x-dLength/2,y,false))
			{
				return false;
			}
			if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
			{
				return false;
			}
			if(!WaitStopXY(10000))
			{
				return false;
			}
		}
		if(!SynchronizeMoveZ(z,true))
		{
			return false;
		}
	}
	if(m_bFirstDisp)
	{
		CTimeUtil::Delay(long(ProductParam.dFirstDispDelay*1000));
		m_bFirstDisp = false;
	}
	CTimeUtil::Delay(long(ProductParam.dPreTime*1000));
	//if(IsExitRun())
	//{
	//	return false;
	//}
	if(!ProductParam.DispMode)
	{
		theApp.m_V9Control.V9C_Dot_Forward(K_SELECT_AXIS);
	}
	m_pMv->SetCrdPrm(FALSE,1,2);
	if(!ProductParam.DispMode)//出胶模式
	{
		V9DotRest = theApp.m_V9Control.V9C_Dot_Line(K_SELECT_AXIS,true);
	}
	if(bVertical)
	{
		m_pMv->ListAddLine(x,y+dLength/2,ProductParam.LineVel,ProductParam.LineAcc);
	}
	else
	{
		m_pMv->ListAddLine(x+dLength/2,y,ProductParam.LineVel,ProductParam.LineAcc);
	}
	if(!m_pMv->AllListRun())
	{
		RunErrorID=15;
		m_tStatus = K_RUN_STS_STOP;
		AddMsg("运动缓冲区运动失败!");
		return false;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000));
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID=30;
		AfxMessageBox("插补运动后：设定速度失败！");
		return false;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		RunErrorID=30;
		AfxMessageBox("插补运动后：设定阀体速度失败！");
		return false;
	}
	if(!ProductParam.DispMode)
	{
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,false))
	{
		return false;
	}
	if(!SynchronizeMoveXY(x,y,true))
	{
		return false;
	}
	if(!WaitStopZ(10000))
	{
		return false;
	}

	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID=30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID=30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::RunSingleDot(double x,double y,double z,double dRectWidth,double dRectLength,int DisBufCout,bool RunDot_RestV9)
{
	m_bDispenseSuccess = false;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(m_tStatus==K_RUN_STS_STOP)
	{
		if(IsExitRun())
		{
			MoveToZSafety();
			return false;
		}
	}
	if(m_bRepair||m_bFirstDisp)
	{
		if(!SynchronizeMoveXY(x-dRectWidth*0.5,y-dRectLength*0.5,true))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
	}
	else
	{
		if(!SynchronizeMoveXY(x-dRectWidth*0.5,y-dRectLength*0.5,false))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
		if(!WaitStopXY(10000))
		{
			return false;
		}
	}
	if(!SynchronizeMoveZ(z,true))
	{
		return false;
	}
	if(m_bFirstDisp)
	{
		CTimeUtil::Delay(long(ProductParam.dFirstDispDelay*1000));
		m_bFirstDisp = false;
	}
	CTimeUtil::Delay(long(ProductParam.dPreTime*1000));
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	double dTotalLength = 2*(dRectLength+dRectWidth);
	m_pMv->SetCrdPrm(FALSE,1,2);
	if(dRectLength>=dRectWidth)
	{
		if(!ProductParam.DispMode)//出胶模式
		{
			theApp.m_V9Control.V9_RunCount++;
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectLength/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x-dRectWidth*0.5,y+dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectWidth/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x+dRectWidth*0.5,y+dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectLength/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x+dRectWidth*0.5,y-dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectWidth/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x-dRectWidth*0.5,y-dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
	}
	else
	{
		if(!ProductParam.DispMode)//出胶模式
		{
			theApp.m_V9Control.V9_RunCount++;
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectWidth/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x+dRectWidth*0.5,y-dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectLength/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x+dRectWidth*0.5,y+dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectWidth/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x-dRectWidth*0.5,y+dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
		if(!ProductParam.DispMode)//出胶模式
		{
			for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[i])
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*dRectLength/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(x-dRectWidth*0.5,y-dRectLength*0.5,ProductParam.LineVel,ProductParam.LineAcc);
	}
	if(!m_pMv->AllListRun())
	{
		RunErrorID=15;
		m_tStatus = K_RUN_STS_STOP;
		AddMsg("运动缓冲区运动失败!");
		return false;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000));
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID=30;
		AfxMessageBox("插补运动后：设定速度失败！");
		return false;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		RunErrorID=30;
		AfxMessageBox("阀体设置参数错误！");
		return false;
	}
	if(!ProductParam.DispMode)
	{
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,false))
	{
		return false;
	}
	if(!SynchronizeMoveXY(x,y,true))
	{
		return false;
	}
	if(!WaitStopZ(10000))
	{
		return false;
	}
	int nCount = V9Parm[0].DispCount;
	for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
	{
		if(nCount>=V9Parm[i].DispCount)
		{
			nCount = V9Parm[i].DispCount;
		}
	}
	if(theApp.m_V9Control.V9_RunCount>=nCount)
	{
		V9DotRest=true;
	}
	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败!");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败!");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID=30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID=30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::RunSingleDot(double x,double y,double z,CList<tgPos,tgPos&> &list,bool RunDot_RestV9)
{
	m_bDispenseSuccess = false;
	if(list.GetCount()<2)
	{
		AfxMessageBox("自定义路径点数小于2个.");
		return false;
	}
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!m_pMv->AllListRun())
		{
			RunErrorID=15;
			m_tStatus = K_RUN_STS_STOP;
			AddMsg("运动缓冲区运动失败!");
			return false;
		}
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(m_tStatus==K_RUN_STS_STOP)
	{
		if(!m_pMv->AllListRun())
		{
			RunErrorID=15;
			m_tStatus = K_RUN_STS_STOP;
			AddMsg("运动缓冲区运动失败!");
			return false;
		}
		if(IsExitRun())
		{
			MoveToZSafety();
			return false;
		}
	}
	double dTotalLength = 0;
	tgPos tgCurrentPos,tgNextPos,tgPrePos;
	for(int i=0;i<list.GetCount()-1;i++)
	{
		tgCurrentPos = list.GetAt(list.FindIndex(i));
		tgNextPos = list.GetAt(list.FindIndex(i+1));
		dTotalLength += sqrt((tgCurrentPos.x-tgNextPos.x)*(tgCurrentPos.x-tgNextPos.x)+(tgCurrentPos.y-tgNextPos.y)*(tgCurrentPos.y-tgNextPos.y));
	}

	tgCurrentPos = list.GetAt(list.FindIndex(0));
	if(m_bRepair||m_bFirstDisp)
	{
		if(!SynchronizeMoveXY(tgCurrentPos.x+x,tgCurrentPos.y+y,true))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
	}
	else
	{
		if(!SynchronizeMoveXY(tgCurrentPos.x+x,tgCurrentPos.y+y,false))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
		if(!WaitStopXY(10000))
		{
			return false;
		}
	}
	if(!SynchronizeMoveZ(z,true))
	{
		return false;
	}
	if(m_bFirstDisp)
	{
		CTimeUtil::Delay(long(ProductParam.dFirstDispDelay*1000));
		m_bFirstDisp = false;
	}
	CTimeUtil::Delay(long(ProductParam.dPreTime*1000));
	if(!ProductParam.DispMode)
	{
		theApp.m_V9Control.V9_RunCount++;
	}
	m_pMv->SetCrdPrm(FALSE,1,2);
	for(int i=1;i<list.GetCount();i++)
	{
		tgPrePos = tgCurrentPos;
		tgCurrentPos = list.GetAt(list.FindIndex(i));
		double dLength = sqrt((tgCurrentPos.x-tgPrePos.x)*(tgCurrentPos.x-tgPrePos.x)+(tgCurrentPos.y-tgPrePos.y)*(tgCurrentPos.y-tgPrePos.y));
		if(!ProductParam.DispMode)
		{
			for(int j=0;j<(int)theApp.m_tSysParam.valveNum;j++)
			{
				if(g_pFrm->m_CmdRun.RunDispFSelect[j])
				{
					m_pMv->AddBufGear(K_AXIS_U+j,g_pFrm->m_CmdRun.V9Parm[j].DispDistance*dLength/dTotalLength);
				}
			}
		}
		m_pMv->ListAddLine(tgCurrentPos.x+x,tgCurrentPos.y+y,ProductParam.LineVel,ProductParam.LineAcc);
	}
	if(!m_pMv->AllListRun())
	{
		RunErrorID=15;
		m_tStatus = K_RUN_STS_STOP;
		AddMsg("运动缓冲区运动失败!");
		return false;
	}
	if(!ProductParam.DispMode)
	{
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000));
	if(!SetAxisProfile(HIGH_VEL)||!theApp.m_V9Control.V9C_SetProfile())
	{
		RunErrorID=30;
		AfxMessageBox("插补运动后：设定速度失败！");
		return false;
	}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	//if(IsExitRun())
	//{
	//	MoveToZSafety();
	//	return false;
	//}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
	{
		return false;
	}
	int nCount = V9Parm[0].DispCount;
	for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
	{
		if(nCount>=V9Parm[i].DispCount)
		{
			nCount = V9Parm[i].DispCount;
		}
	}
	if(theApp.m_V9Control.V9_RunCount>=nCount)
	{
		V9DotRest=true;
	}
	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败!");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败!");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID=30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID = 30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::RunSingleDot(double x,double y,double z,double dCircleRadius,bool RunDot_RestV9)
{
	m_bDispenseSuccess = false;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return false;
		}
	}
	if(m_tStatus == K_RUN_STS_STOP)
	{
		if(IsExitRun())
		{
			MoveToZSafety();
			return false;
		}
	}
	double totalLength = 0;
	double dTemp = dCircleRadius;
	double dRadius = 0.0;
	totalLength += 2*KGB_PI*dTemp*(ProductParam.dCompAngle/360);
	if(!ProductParam.DispMode)
	{
		theApp.m_V9Control.V9_RunCount++;
	}
	if(m_bRepair||m_bFirstDisp)
	{
		if(!SynchronizeMoveXY(x,y,true))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
	}
	else
	{
		if(!SynchronizeMoveXY(x,y,false))
		{
			return false;
		}
		if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
		{
			return false;
		}
		if(!WaitStopXY(10000))
		{
			return false;
		}
	}
	if(!SynchronizeMoveZ(z,true))
	{
		return false;
	}
	m_pMv->SetCrdPrm(FALSE,1,2);
	m_pMv->ListAddLine(x-dCircleRadius,y,ProductParam.CircleVel,ProductParam.CircleAcc);
	if(!ProductParam.DispMode)
	{
		for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
		{
			if(g_pFrm->m_CmdRun.RunDispFSelect[i])
			{
				if((VALVE_M9==theApp.m_tSysParam.ValveType)||(VALVE_L9==theApp.m_tSysParam.ValveType))
				{
					m_pMv->AddBufGear(K_AXIS_U+i,g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius*(ProductParam.dCompAngle/360.0))/totalLength);
				}
				else if(VALVE_H9==theApp.m_tSysParam.ValveType)
				{
					m_pMv->AddBufGear(K_AXIS_U+i,-g_pFrm->m_CmdRun.V9Parm[i].DispDistance*(2*KGB_PI*dCircleRadius*(ProductParam.dCompAngle/360.0))/totalLength);
				}
			}
		}
	}
	m_pMv->ListAddArc(x-dCircleRadius*cos(ProductParam.dCompAngle/180.0*KGB_PI),y+dCircleRadius*sin(ProductParam.dCompAngle/180.0*KGB_PI),ProductParam.dCompAngle<180?dCircleRadius:-dCircleRadius,0,ProductParam.CircleVel,ProductParam.CircleAcc);

	if(!m_pMv->AllListRun())
	{
		RunErrorID=15;
		m_tStatus = K_RUN_STS_STOP;
		AddMsg("运动缓冲区运动失败！");
		return false;
	}
	if ((ProductParam.dPostDisTime<=0.005)&&!ProductParam.DispMode)
	{   
		ProductParam.dPostDisTime=0.005;
	}
	CTimeUtil::Delay(long(ProductParam.dPostDisTime*1000));
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("插补运动后：设定速度失败！");
		return false;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		RunErrorID = 30;
		AfxMessageBox("插补运动后：设定阀体速度失败！");
		return false;
	}
	if(!ProductParam.DispMode)
	{
		if(!IsExitRun())
		{
			m_bDispenseSuccess = true;
		}
	}
	else
	{
		m_bDispenseSuccess = true;
	}
	if(z-ProductParam.dPauseHeight<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于暂停高度");
		return false;
	}
	if(!SetAxisProfile(LIFT_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定提升速度失败！");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dPauseHeight,true))
	{
		return false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		AfxMessageBox("提升高度：设定高速速度失败！");
		return false;
	}
	CTimeUtil::Delay(long(ProductParam.dPauseTime*1000));
	//if(IsExitRun())
	//{
	//	MoveToZSafety();
	//	return false;
	//}
	if(z-ProductParam.dZupHigh<0)
	{
		RunErrorID=16;
		AddMsg("参数错误：Z轴点胶位小于Z轴提升高度");
		return false;
	}
	if(!SynchronizeMoveZ(z-ProductParam.dZupHigh,true))
	{
		return false;
	}

	int nCount = V9Parm[0].DispCount;
	for(int i=0;i<(int)theApp.m_tSysParam.valveNum;i++)
	{
		if(nCount>=V9Parm[i].DispCount)
		{
			nCount = V9Parm[i].DispCount;
		}
	}
	if(theApp.m_V9Control.V9_RunCount>=nCount)
	{
		V9DotRest=true;
	}
	if (V9DotRest&&RunDot_RestV9)
	{
		m_bValveReset = true;
		int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		m_bValveReset = false;
		if(nReturnValue>0)
		{
			RunErrorID=nReturnValue+5;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(nReturnValue<0)
		{
			RunErrorID=-nReturnValue+1;
			AfxMessageBox("阀体复位失败！");
			return false;
		}
		if(!theApp.m_V9Control.V9C_SetProfile())
		{
			RunErrorID = 30;
			AfxMessageBox("阀体设置参数错误！");
			return false;
		}
		m_bFirstDisp = true;
		V9DotRest = false;
		if(!CleanAndTest(true))
		{
			AfxMessageBox("清洗与试胶失败！");
			return false;
		}
		if(ProductParam.FullTestDot||ProductParam.FullClean)
		{
			if(!SetAxisProfile(HIGH_VEL))
			{
				RunErrorID = 30;
				AfxMessageBox("清洗与试胶：设定速度失败！");
				return false;
			}
		}
	}
	return true;
}

bool CCmdRun::SingleDot(int nDisNumber)
{
	DWORD W_Startime,W_EndTime;
	bool m_temPRestV9 = true;
	W_Startime = W_EndTime = GetTickCount();
	if(ProductParam.IrregularMatrix)
	{
		if (DisCompCount+1==(ProductParam.IrregularColumn*ProductParam.IrregularRow))
		{
			m_temPRestV9 = false;
		}
	}
	else
	{
		if(ProductParam.FirstDispColumn>1)
		{
			if (DisCompCount+1==(ProductParam.ThirdDispColumn*ProductParam.ThirdDispRow*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.FirstDispRow*(ProductParam.FirstDispColumn+2)/3))
			{
				m_temPRestV9 = false;
			}
		}
		else if(ProductParam.SecondDispColumn>1)
		{
			if (DisCompCount+1==(ProductParam.ThirdDispColumn*ProductParam.ThirdDispRow*ProductParam.SecondDispRow*(ProductParam.SecondDispColumn+2)/3*ProductParam.FirstDispRow*ProductParam.FirstDispColumn))
			{
				m_temPRestV9 = false;
			}
		}
		else
		{
			if (DisCompCount+1==((ProductParam.ThirdDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.FirstDispRow*ProductParam.FirstDispColumn))
			{
				m_temPRestV9 = false;
			}
		}
	}
	if(ProductParam.fillMode==CUSTOM_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,g_pFrm->m_rawList,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==HELIX_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,ProductParam.dDispRadius,ProductParam.dDistance,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==RECTANGLE_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,ProductParam.RectWidth,ProductParam.RectLength,ProductParam.DispFCount,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==LINE_VERTICAL_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,ProductParam.LineLength,true,ProductParam.DispFCount,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==LINE_HORIZONTAL_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,ProductParam.LineLength,false,ProductParam.DispFCount,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==CIRCLE_DISP_MODE)
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,ProductParam.dDispRadius,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else
	{
		if(!RunSingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz,m_temPRestV9))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	//统计
	//StautDisp.W_Count+=ProductParam.DispFCount;
	DisCompCount++;
	theApp.m_tSysParam.StatCapacity += ProductParam.DispFCount;
	W_EndTime=GetTickCount();
	StautDisp.W_SingeTimer=(W_EndTime-W_Startime)/1000.00;
	if ((StautDisp.W_SingeTimer>0.05))
	{
		StautDisp.W_UPH=3600/StautDisp.W_SingeTimer*ProductParam.DispFCount;
	}
	return true;
}

// 单个点胶
bool CCmdRun::SingleDot(double x,double y,double z,bool bV9Reset /* = true */)
{
	DWORD W_Startime,W_EndTime;
	W_Startime = W_EndTime = GetTickCount();
	if(ProductParam.fillMode==CUSTOM_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,g_pFrm->m_rawList,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==HELIX_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,ProductParam.dDispRadius,ProductParam.dDistance,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==RECTANGLE_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,ProductParam.RectWidth,ProductParam.RectLength,ProductParam.DispFCount,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==LINE_VERTICAL_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,ProductParam.LineLength,true,ProductParam.DispFCount,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==LINE_HORIZONTAL_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,ProductParam.LineLength,false,ProductParam.DispFCount,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else if(ProductParam.fillMode==CIRCLE_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,ProductParam.dDispRadius,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	else
	{
		if(!RunSingleDot(x,y,z,bV9Reset))
		{
			MoveToZSafety();
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			return false;
		}
	}
	//统计
	//StautDisp.W_Count+=ProductParam.DispFCount;
	DisCompCount++;
	theApp.m_tSysParam.StatCapacity += ProductParam.DispFCount;
	W_EndTime=GetTickCount();
	StautDisp.W_SingeTimer=(W_EndTime-W_Startime)/1000.00;
	if ((StautDisp.W_SingeTimer>0.05))
	{
		StautDisp.W_UPH=3600/StautDisp.W_SingeTimer*ProductParam.DispFCount;
	}
	return true;
}

// 等待暂停结束
bool CCmdRun::WaitPasueEnd(void)
{
	static bool Run_Pasue=false;
	m_bFirstDisp = true;
	if (Run_Pasue)
	{
		return true;
	}
	Run_Pasue=true;
	AddMsg("点胶暂停中！");
	if(!MoveToZSafety())
	{
		return false;
	}
	while (m_tStatus == K_RUN_STS_PAUSE)
	{
		CFunction::DoEvents();
		Sleep(50);
		if (IsExitRun())
		{
			Run_Pasue=false;
			return false;
		}
	}
	if(g_pFrm->bIsCtrlDlgVisible)
	{
		//g_pFrm->m_dlgCtrl.OnDlgExit();
		::SendMessage(g_pFrm->m_dlgCtrl.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCtrlDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->IsV9SetDlgVisible)
	{
		//g_pFrm->m_V9Param.OnV9SetExit();
		::SendMessage(g_pFrm->m_V9Param.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->IsV9SetDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if (!V9RestOK)
	{
		if(!RestDisP())
		{
			m_tStatus = K_RUN_STS_STOP;
			Run_Pasue = false;
			m_bFirstDisp = false;
			return false;
		}
	}
	if(ProductParam.PauseCleanTest)
	{
		if(!CleanAndTest(FALSE))
		{
			return false;
		}
		if(!SetAxisProfile(HIGH_VEL))
		{
			RunErrorID = 30;
			AfxMessageBox("清洗与试胶：设定速度失败！");
			return false;
		}
	}
	Run_Pasue=false;
	return true;
}
// 吸真空
bool CCmdRun::CleanNeedle(bool Z_ON)
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能清洗针头！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能清洗针头！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能清洗针头！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能清洗针头！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能清洗针头！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能清洗针头！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能回清洗针头！");
		}
		m_pLog->log(strError);
		return false;
	}
	strError.Format("开始清洗针头");
	m_pLog->log(strError);
	m_bCleanNeedle = true;
	if(!MoveToZSafety())
	{
		m_bCleanNeedle = false;
		strError.Format("清洗针头失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bCleanNeedle = false;
		strError.Format("清洗针头失败");
		m_pLog->log(strError);
		return false;
	}
	if(!SynchronizeMoveXY(theApp.m_tSysParam.CleanPosition[0],theApp.m_tSysParam.CleanPosition[1],true))
	{
		m_bCleanNeedle = false;
		strError.Format("清洗针头失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bCleanNeedle = false;
		strError.Format("清洗针头失败");
		m_pLog->log(strError);
		return false;
	}
	if(Z_ON)
	{
		if(!SynchronizeMoveZ(theApp.m_tSysParam.CleanPosition[2],true))
		{
			m_bCleanNeedle = false;
			strError.Format("清洗针头失败");
			m_pLog->log(strError);
			return false;
		}
		m_pMv->SetOutput(theApp.m_tSysParam.outNeedleClean,TRUE);
		if(ProductParam.CleanDischarge)
		{
			theApp.m_V9Control.V9C_Test(K_ALL_AXIS);
		}
		CFunction::Delay(ProductParam.dCleanDelay);
		if(!MoveToZSafety())
		{
			m_bCleanNeedle = false;
			strError.Format("清洗针头失败");
			m_pLog->log(strError);
			return false;
		}
		m_pMv->SetOutput(theApp.m_tSysParam.outNeedleClean,FALSE);
	}
	m_bCleanNeedle = false;
	strError.Format("清洗针头成功");
	m_pLog->log(strError);
	return true;
}
// 到取图位
bool CCmdRun::StartGrabImagePos()
{
	if(!MoveToZSafety())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	tgPos tgStartPos = GetFirstCameraPos();
	if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y,true))
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveZ(tgStartPos.z,true))
	{
		return false;
	}
	return true;
}

bool CCmdRun::EndGrabImagePos()
{
	if(!MoveToZSafety())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	tgPos tgEndPos = GetLastCameraPos();
	if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y,true))
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveZ(tgEndPos.z,true))
	{
		return false;
	}
	return true;
}

bool CCmdRun::GrabImagePos(int nIndex,bool bIsSafety)
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能到取图位！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能到取图位！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能到取图位！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能到取图位！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能到取图位！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能到取图位！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能到取图位！");
		}
		m_pLog->log(strError);
		return false;
	}
	m_bSearchMark = true;
	if(nIndex<0||nIndex>=ProductParam.nImageNum)
	{
		m_bSearchMark = false;
		return false;
	}
	if(!bIsSafety)
	{
		if(!MoveToZSafety())
		{
			m_bSearchMark = false;
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			m_bSearchMark = false;
			return false;
		}
	}
	if(!SynchronizeMoveXY(ProductParam.tgImagePos[nIndex].x,ProductParam.tgImagePos[nIndex].y,true))
	{
		m_bSearchMark = false;
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bSearchMark = false;
		return false;
	}
	if(!SynchronizeMoveZ(ProductParam.tgImagePos[nIndex].z,true))
	{
		m_bSearchMark = false;
		return false;
	}
	m_bSearchMark = false;
	return true;
}

bool CCmdRun::TestDotPos(bool Z_ON)
{
	if(!MoveToZSafety())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveXY(theApp.m_tSysParam.TestDotPostion[0],theApp.m_tSysParam.TestDotPostion[1],true))
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(Z_ON)
	{
		if(!SynchronizeMoveZ(theApp.m_tSysParam.TestDotPostion[2],true))
		{
			return false;
		}
		for(int i=0;i<ProductParam.TestDotNumber;i++)
		{
			theApp.m_V9Control.V9C_Test(K_ALL_AXIS);
			CFunction::Delay(ProductParam.dTestDotDelay);
		}
		if(!MoveToZSafety())
		{
			return false;
		}
	}
	return true;
}

bool CCmdRun::TestDispense(int nIndex,bool bDispense)
{
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		CString strError;
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能试胶！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能试胶！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能试胶！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能试胶！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能试胶！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能试胶！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能试胶！");
		}
		m_pLog->log(strError);
		return false;
	}
	m_bTestDispense = true;
	if(!MoveToZSafety())
	{
		m_bTestDispense = false;
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bTestDispense = false;
		return false;
	}
	if(!SynchronizeMoveXY(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[nIndex].x,g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[nIndex].y,true))
	{
		m_bTestDispense = false;
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bTestDispense = false;
		return false;
	}
	if(bDispense)
	{
		if(!SynchronizeMoveZ(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[nIndex].z,true))
		{
			m_bTestDispense = false;
			return false;
		}
		CFunction::Delay(ProductParam.dTestDotDelay*0.5);
		theApp.m_V9Control.V9C_Test(K_ALL_AXIS);
		CFunction::Delay(ProductParam.dTestDotDelay*0.5);
		if(!MoveToZSafety())
		{
			m_bTestDispense = false;
			return false;
		}
	}
	else
	{
		if(AfxMessageBox("确定移动到试胶位吗？",MB_YESNO)==IDYES)
		{
			if(!SynchronizeMoveZ(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[nIndex].z,true))
			{
				m_bTestDispense = false;
				return false;
			}
		}
	}
	m_bTestDispense = false;
	return true;
}

bool CCmdRun::TestDispense()
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能试胶！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能试胶！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能试胶！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能试胶！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能试胶！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能试胶！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能试胶！");
		}
		m_pLog->log(strError);
		return false;
	}
	strError.Format("开始试胶");
	m_pLog->log(strError);
	m_bTestDispense = true;
	if(ProductParam.TestDotNumber<=0||ProductParam.TestDotNumber>10)
	{
		m_bTestDispense = false;
		strError.Format("试胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(!MoveToZSafety())
	{
		m_bTestDispense = false;
		strError.Format("试胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bTestDispense = false;
		strError.Format("试胶失败");
		m_pLog->log(strError);
		return false;
	}
	for(int i=0;i<ProductParam.TestDotNumber;i++)
	{
		if(!SynchronizeMoveXY(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[i].x,g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[i].y,true))
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveZ(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[i].z,true))
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
		CFunction::Delay(ProductParam.dTestDotDelay*0.5);
		theApp.m_V9Control.V9C_Test(K_ALL_AXIS);
		CFunction::Delay(ProductParam.dTestDotDelay*0.5);
		if(!SynchronizeMoveZ(g_pFrm->m_CmdRun.ProductParam.tgTestDispPos[i].z-ProductParam.dZupHigh,true))
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			m_bTestDispense = false;
			strError.Format("试胶失败");
			m_pLog->log(strError);
			return false;
		}
	}
	if(!MoveToZSafety())
	{
		m_bTestDispense = false;
		strError.Format("试胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bTestDispense = false;
		strError.Format("试胶失败");
		m_pLog->log(strError);
		return false;
	}
	m_bTestDispense = false;
	strError.Format("试胶成功");
	m_pLog->log(strError);
	return true;
}

bool CCmdRun::DischargePosition(bool Z_ON,bool bDefoam)
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能排胶！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能排胶！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能排胶！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能排胶！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能排胶！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能排胶！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能排胶！");
		}
		m_pLog->log(strError);
		return false;
	}
	strError.Format("开始排胶");
	m_pLog->log(strError);
	m_bDischarge = true;
	if(!MoveToZSafety())
	{
		m_bDischarge = false;
		strError.Format("排胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bDischarge = false;
		strError.Format("排胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(!SynchronizeMoveXY(theApp.m_tSysParam.DischargeGluePostion[0],theApp.m_tSysParam.DischargeGluePostion[1],true))
	{
		m_bDischarge = false;
		strError.Format("排胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bDischarge = false;
		strError.Format("排胶失败");
		m_pLog->log(strError);
		return false;
	}
	if(Z_ON)
	{
		if(bDefoam)
		{
			if(!SynchronizeMoveZ(theApp.m_tSysParam.DischargeGluePostion[2],true))
			{
				m_bDischarge = false;
				strError.Format("排胶失败");
				m_pLog->log(strError);
				return false;
			}
			if(VALVE_H9 == theApp.m_tSysParam.ValveType)
			{
				theApp.m_V9Control.V9C_Defoam(K_ALL_AXIS);
				theApp.m_V9Control.V9C_SetProfile();
			}
			else if((VALVE_L9 == theApp.m_tSysParam.ValveType)||(VALVE_M9 == theApp.m_tSysParam.ValveType))
			{
				int nReturnValue = theApp.m_V9Control.V9C_Home(K_ALL_AXIS);
				theApp.m_V9Control.V9C_SetProfile();
				if(nReturnValue<0)
				{
					RunErrorID=-nReturnValue+9;
				}
				else if(nReturnValue>0)
				{
					RunErrorID=nReturnValue+9;
				}
				for (int i=0;i<3;i++)
				{
					theApp.m_Mv400.SetOutput(theApp.m_tSysParam.outOpenPress[i],TRUE);
				}
			}
		}
		else
		{
			if(!SynchronizeMoveZ(theApp.m_tSysParam.DischargeGluePostion[2],true))
			{
				m_bDischarge = false;
				strError.Format("排胶失败");
				m_pLog->log(strError);
				return false;
			}
			theApp.m_V9Control.V9C_Clearn(K_ALL_AXIS,g_pFrm->m_CmdRun.V9Parm[0].CleanCount,g_pFrm->m_CmdRun.V9Parm[0].CleanSpeed);
			theApp.m_V9Control.V9C_SetProfile();
			if(!MoveToZSafety())
			{
				m_bDischarge = false;
				strError.Format("排胶失败");
				m_pLog->log(strError);
				return false;
			}
		}
	}
	m_bDischarge = false;
	strError.Format("排胶成功");
	m_pLog->log(strError);
	return true;
}

bool CCmdRun::SlotDetectPosition()
{
	if(!MoveToZSafety())
	{
		return false;
	}
	if(m_tStatus == K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	//m_pMv->MoveXY(tgHeightPos.x, tgHeightPos.y, ProductParam.FreeVal, ProductParam.FreeAcc, true);
	if(!SynchronizeMoveXY(ProductParam.tSlotDetectPos.x,ProductParam.tSlotDetectPos.y,true))
	{
		return false;
	}
	if(m_tStatus == K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveZ(ProductParam.tSlotDetectPos.z,true))
	{
		return false;
	}

	return true;
}

bool CCmdRun::MoveToHeightPosition(int nIndex)
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能到测高位！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能到测高位！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能到测高位！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能到测高位！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能到测高位！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能到测高位！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能到测高位！");
		}
		m_pLog->log(strError);
		return false;
	}
	m_bMeasureHeight = true;
	if(!MoveToZSafety())
	{
		m_bMeasureHeight = false;
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bMeasureHeight = false;
		return false;
	}
	//m_pMv->MoveXY(tgHeightPos.x, tgHeightPos.y, ProductParam.FreeVal, ProductParam.FreeAcc, true);
	if(!SynchronizeMoveXY(ProductParam.tgMeasureHeightPos[nIndex].x,ProductParam.tgMeasureHeightPos[nIndex].y,true))
	{
		m_bMeasureHeight = false;
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		m_bMeasureHeight = false;
		return false;
	}
	if(!SynchronizeMoveZ(ProductParam.tgMeasureHeightPos[nIndex].z,true))
	{
		m_bMeasureHeight = false;
		return false;
	}
	m_bMeasureHeight = false;
	return true;
}

// 测高
HEIGHT_STATUS CCmdRun::MeasureHeight(double& dOffsetZ)
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能到测高位！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能到测高位！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能到测高位！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能到测高位！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能到测高位！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能到测高位！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能到测高位！");
		}
		m_pLog->log(strError);
		return HEIGHT_STATUS_UNKNOWN_ERROR;
	}
	m_bMeasureHeight = true;
	strError.Format("开始测高");
	m_pLog->log(strError);
	CString str;
	CString strText="";
	CString strTest[2];
	tgPos tgMeasurePos;
	double dTestHeight[2];
	double dTempHeight = 0.0;
	double dTotalHeight = 0.0;
	double dMax = 0;
	double dMin = 0;
	tgMeasurePos.x = ProductParam.tgMeasureHeightPos[0].x;
	tgMeasurePos.y = ProductParam.tgMeasureHeightPos[0].y;
	tgMeasurePos.z = ProductParam.tgMeasureHeightPos[0].z;
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			m_bMeasureHeight = false;
			strError.Format("测高失败");
			m_pLog->log(strError);
			return HEIGHT_STATUS_UNKNOWN_ERROR;
		}
	}
	if(IsExitRun())
	{
		m_bMeasureHeight = false;
		strError.Format("测高失败");
		m_pLog->log(strError);
		return HEIGHT_STATUS_UNKNOWN_ERROR;
	}
	if(!SynchronizeMoveXY(tgMeasurePos.x,tgMeasurePos.y,true))
	{
		m_bMeasureHeight = false;
		strError.Format("测高失败");
		m_pLog->log(strError);
		return HEIGHT_STATUS_MOTION_FAILURE;
	}
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			m_bMeasureHeight = false;
			strError.Format("测高失败");
			m_pLog->log(strError);
			return HEIGHT_STATUS_UNKNOWN_ERROR;
		}
	}
	if(IsExitRun())
	{
		m_bMeasureHeight = false;
		strError.Format("测高失败");
		m_pLog->log(strError);
		return HEIGHT_STATUS_UNKNOWN_ERROR;
	}
	m_pMv->Move(K_AXIS_Z,tgMeasurePos.z,true,true);
	if(!SynchronizeMoveZ(tgMeasurePos.z,true))
	{
		m_bMeasureHeight = false;
		strError.Format("测高失败");
		m_pLog->log(strError);
		return HEIGHT_STATUS_MOTION_FAILURE;
	}
	Sleep(DWORD(ProductParam.dHeightDelay*1000));
	ReadHeightSensorValue(&dTestHeight[0]);
	ReadHeightSensorValue(&dTestHeight[1]);
	ReadHeightSensorValue(&dTempHeight);
	dTotalHeight += dTempHeight;
	dMax = dMin = dTempHeight;
	str.Format("Test1:%0.3f",dTestHeight[0]);
	str.Format("Test2:%0.3f",dTestHeight[1]);
	str.Format("Height:%0.3f",dTempHeight);
	strTest[0] += str;
	strTest[1] += str;
	strText += str;
	for(int i=1;i<ProductParam.HeightNumber;i++)
	{
		tgMeasurePos.x = ProductParam.tgMeasureHeightPos[i].x;
		tgMeasurePos.y = ProductParam.tgMeasureHeightPos[i].y;
		tgMeasurePos.z = ProductParam.tgMeasureHeightPos[i].z;
		if (m_tStatus == K_RUN_STS_PAUSE)
		{
			if(!WaitPasueEnd())
			{
				m_bMeasureHeight = false;
				strError.Format("测高失败");
				m_pLog->log(strError);
				return HEIGHT_STATUS_UNKNOWN_ERROR;
			}
		}
		if(IsExitRun())
		{
			m_bMeasureHeight = false;
			strError.Format("测高失败");
			m_pLog->log(strError);
			return HEIGHT_STATUS_UNKNOWN_ERROR;
		}
		if(!SynchronizeMoveXY(tgMeasurePos.x,tgMeasurePos.y,true))
		{
			m_bMeasureHeight = false;
			strError.Format("测高失败");
			m_pLog->log(strError);
			return HEIGHT_STATUS_MOTION_FAILURE;
		}
		if (m_tStatus == K_RUN_STS_PAUSE)
		{
			if(!WaitPasueEnd())
			{
				m_bMeasureHeight = false;
				strError.Format("测高失败");
				m_pLog->log(strError);
				return HEIGHT_STATUS_UNKNOWN_ERROR;
			}
		}
		if(IsExitRun())
		{
			m_bMeasureHeight = false;
			strError.Format("测高失败");
			m_pLog->log(strError);
			return HEIGHT_STATUS_UNKNOWN_ERROR;
		}
		m_pMv->Move(K_AXIS_Z,tgMeasurePos.z,true,true);
		Sleep(DWORD(ProductParam.dHeightDelay*1000));
		ReadHeightSensorValue(&dTestHeight[0]);
		ReadHeightSensorValue(&dTestHeight[1]);
		ReadHeightSensorValue(&dTempHeight);
		dTotalHeight += dTempHeight;
		if(dMax<dTempHeight)
		{
			dMax = dTempHeight;
		}
		else if(dMin>dTempHeight)
		{
			dMin = dTempHeight;
		}
		str.Format(",%0.3f",dTestHeight[0]);
		str.Format(",%0.3f",dTestHeight[1]);
		str.Format(",%0.3f",dTempHeight);
		strTest[0] += str;
		strTest[1] += str;
		strText += str;
	}
	AddMsg(strText);
	m_pLog->log(strText);
	AddMsg(strTest[0]);
	m_pLog->log(strTest[0]);
	AddMsg(strTest[1]);
	m_pLog->log(strTest[1]);
	//m_tOffset.z = dTotalHeight/ProductParam.nMeasureNum-ProductParam.HeightStandardValue;
	dOffsetZ = dTotalHeight/ProductParam.HeightNumber;
	if(fabs(dMax-dMin)>ProductParam.dHeightError)
	{
		m_bMeasureHeight = false;
		strError.Format("测高失败");
		m_pLog->log(strError);
		return HEIGHT_STATUS_EXCEED_LIMIT;
	}
	//if(fabs(m_tOffset.z)>ProductParam.HeightError)
	//{
	//	return false;
	//}
	m_bMeasureHeight = false;
	strError.Format("测高成功");
	m_pLog->log(strError);
	return HEIGHT_STATUS_OK;
}

// 点胶
int  CCmdRun::DisDotCtrl()//在填充时不用等忙信号
{
	if (ManalRun&&!AutoRunCp)
	{
		return theApp.m_V9Control.V9C_Dot(K_ALL_AXIS,false);
	}
	else
	{
		return theApp.m_V9Control.V9C_Dot(K_SELECT_AXIS,false);
	}
}
// 点胶位
bool CCmdRun::DispensingPos(bool Z_OFF)
{
	if(!MoveToZSafety())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveXY(ProductParam.DispenseStartPos[0],ProductParam.DispenseStartPos[1],true))
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if (Z_OFF)
	{
		if(!SynchronizeMoveZ(ProductParam.DispenseStartPos[2]-ProductParam.dDispenseHeight,true))
		{
			return false;
		}
	}
	return true;
}
// 电机是否在点胶第一点位置
bool CCmdRun::CheckMPdotFirst(void)
{
	if (fabs(PDposting[0].Dx-m_pMv->GetPos(K_AXIS_X))>0.1)
	{
	   return false;
	}
	if (fabs(PDposting[0].Dy-m_pMv->GetPos(K_AXIS_Y))>0.1)
	{
		return false;
	}
	return true;
}
// 复位阀体
bool CCmdRun::RestDisP()
{
	static bool b=false;
	if (b)
	{
		return true;
	}
	b=true;
	
	int RestResult;
	CString str;
	int HomeResult;
	if (!theApp.m_tSysParam.V9HomeSu)//回零
	{
		HomeResult=theApp.m_V9Control.V9C_Home(K_ALL_AXIS);
		if (HomeResult<0)
		{
			str.Format("第%d个控制器回零失败",-HomeResult);
			AddMsg(str);
			RunErrorID=-HomeResult+9;
			b=false;
			return false;
		}
		else if (HomeResult>0)
		{
			str.Format("第%d个控制器关阀失败",HomeResult);
			AddMsg(str);
			RunErrorID=HomeResult+1;
			b=false;
			return false;	
		}
		else if (HomeResult==0)
		{
			theApp.m_tSysParam.V9HomeSu=true;
		}	
	}
	//复位
	V9RestOK=false;
	m_bValveReset = true;
	RestResult=theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
	m_bValveReset = false;
	if (RestResult<0)
	{
		str.Format("第%d个控制器关阀失败",-RestResult);
		AddMsg(str);
		RunErrorID=-RestResult+1;
		b=false;
		AfxMessageBox(str);
		return false;
	}
	else if (RestResult>0)
	{
		str.Format("第%d个控制器开阀失败",RestResult);
		AddMsg(str);
		RunErrorID=RestResult+5;
		b=false;
		AfxMessageBox(str);
		return false;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		b = false;
		AfxMessageBox("阀体设置参数错误！");
		return false;
	}
	if(theApp.m_tSysParam.V9HomeSu&&theApp.m_tSysParam.ThreeAxHomeSu)
	{
		theApp.m_Mv400.SetOutput(theApp.m_tSysParam.outReady,TRUE);
	}
	else
	{
		theApp.m_Mv400.SetOutput(theApp.m_tSysParam.outReady,FALSE);
		str.Format("ThreeAxHomeSu:%d,V9HomeSu:%d",theApp.m_tSysParam.ThreeAxHomeSu,theApp.m_tSysParam.V9HomeSu);
		AddMsg(str);
	}
	V9RestOK=true;
	b=false;
	return true;

}
// 返回复位位置和点胶次数和点胶行程
double  CCmdRun::CapRestDistance(double dispul,long m_dispsetcount, long *discount,double *dispdistance, double dFirstCompVol)
{
	double dReturnValue = -1;
	double m_dispdistance;
	double m_dFirstCompDistance;
	long  m_count = 0;
	if (theApp.m_tSysParam.Dispratios>0)
	{
		m_dispdistance=dispul/theApp.m_tSysParam.Dispratios;//点胶行程
		m_dFirstCompDistance = dFirstCompVol/theApp.m_tSysParam.Dispratios;//第一点胶点补偿行程
	}   
	else
	{
		return -1;
	}
	if(fabs(m_dispdistance)<0.0001)
	{
		return -2;
	}
	if((VALVE_M9 == theApp.m_tSysParam.ValveType)||(VALVE_L9 == theApp.m_tSysParam.ValveType))
	{
		m_count=(theApp.m_tSysParam.DisEndDistance-theApp.m_tSysParam.DispFreeDistance-m_dFirstCompDistance-1)/m_dispdistance;
	}
	else if(VALVE_H9 == theApp.m_tSysParam.ValveType)
	{
		m_count=(theApp.m_tSysParam.DisEndDistance-theApp.m_tSysParam.DispFreeDistance-m_dFirstCompDistance)/m_dispdistance;
	}
	if (m_count<=0)
	{
		return -3;
	}
	*dispdistance=m_dispdistance;
	if (m_count<=m_dispsetcount)
	{
		*discount=m_count;
		if((VALVE_M9 == theApp.m_tSysParam.ValveType)||(VALVE_L9 == theApp.m_tSysParam.ValveType))
		{
			dReturnValue = theApp.m_tSysParam.DispFreeDistance+1;
		}
		else if(VALVE_H9 == theApp.m_tSysParam.ValveType)
		{
			dReturnValue = theApp.m_tSysParam.DisEndDistance - theApp.m_tSysParam.DispFreeDistance;
		}
		return dReturnValue;
	}
	*discount=m_dispsetcount;
	if((VALVE_M9 == theApp.m_tSysParam.ValveType)||(VALVE_L9 == theApp.m_tSysParam.ValveType))
	{
		dReturnValue = theApp.m_tSysParam.DisEndDistance-m_dispsetcount*m_dispdistance-m_dFirstCompDistance;
	}
	else if(VALVE_H9 == theApp.m_tSysParam.ValveType)
	{
		dReturnValue = m_dispsetcount*m_dispdistance+m_dFirstCompDistance;
	}
	return dReturnValue;
}

// 手动产量清零
void CCmdRun::ZEROClearn(void)
{
	//StautDisp.W_Count=0;
	theApp.m_tSysParam.StatCapacity = 0;
}

// 运行复位线程
void CCmdRun::RunThreadHome()
{
	g_pHomeThread = AfxBeginThread(CCmdRun::ThreadHome,this);
	if(g_pHomeThread==NULL)
	{
		m_tStatus = K_RUN_STS_STOP;
		AfxMessageBox("上料线程创建失败.");
		return;
	}
}

// 点胶操作
void CCmdRun::DispenseOperation()
{
	CString strError;
	if(!ExtandTrack(m_tOffset.x,m_tOffset.y,m_tOffset.z,m_dRotateAngle))
	{
		m_tStatus = K_RUN_STS_STOP;
		Stop();
		strError.Format("轨迹计算错误！");
		m_pLog->log(strError);
		return;
	}
	if(m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return;
		}
	}
	if(IsExitRun())
	{
		MoveToZSafety();
		return ;
	}
	m_pMv->m_bStopEvent = FALSE;
	if(!MoveToZSafety())
	{
		return;
	}

	V9DotRest=false;
	if(IsExitRun())
	{
		MoveToZSafety();
		return ;
	}
	if(ONE_VALVE == ProductParam.valveSelect)
	{
		if(!SingleDispense())
		{
			strError.Format("单阀点胶出错！");
			m_pLog->log(strError);
			return;
		}
	}
	else if(TWO_VALVE == ProductParam.valveSelect)
	{
		if(!SecondDispense())
		{
			strError.Format("双阀点胶出错！");
			m_pLog->log(strError);
			return;
		}
	}
	else
	{
		if(!ThirdDispense())
		{
			strError.Format("三阀点胶出错！");
			m_pLog->log(strError);
			return;
		}
	}
	ProductParam.tgTrackInfo.TrackReset();
}

// 点胶位置计算
BOOL CCmdRun::ExtandTrack(double offsetX,double offsetY,double offsetZ,double dAngle)
{
	tgPos tgTempPos;
	CString strTemp;
	double dStartPos[3],dEndPos[3];
	double dCenterX,dCenterY;
	double dAlignCenterX,dAlignCenterY;
	if (ProductParam.IrregularMatrix)
	{
		int temID2 = ProductParam.IrregularRow*ProductParam.IrregularColumn;
		if(temID2<=0)
		{
			return false;
		}
		if (PDposting!=NULL)
		{
			LONGLONG llDueTime = CTimeUtil::GetDueTime(5000);
			while(!CTimeUtil::IsTimeout(llDueTime))
			{
				if(!m_bRefresh)
				{
					delete[] PDposting;
					PDposting = NULL;
					break;
				}
			}
			if(PDposting!=NULL)
			{
				AfxMessageBox("刷新界面超时！");
				return false;
			}
		}
		PDposting=new tagDPostion[temID2];
		int temID = 0;
		if(ONE_VALVE==ProductParam.valveSelect)
		{
			tgTempPos = GetPadDispensePos(ProductParam.IrregularRow-1,ProductParam.IrregularColumn-1);
		}
		else if(TWO_VALVE==ProductParam.valveSelect)
		{
			tgTempPos = GetPadDispensePos(ProductParam.IrregularRow-1,(ProductParam.IrregularColumn-1)/2);
		}
		else
		{
			tgTempPos = GetPadDispensePos(ProductParam.IrregularRow-1,(ProductParam.IrregularColumn-1)/3);
		}
		for(int i=0;i<3;i++)
		{
			dStartPos[i] = ProductParam.DispenseStartPos[i];
			if(i==2)
			{
				dStartPos[i] -= ProductParam.dDispenseHeight;
			}
		}
		dEndPos[0] = tgTempPos.x;
		dEndPos[1] = tgTempPos.y;
		dEndPos[2] = dStartPos[2];
		dCenterX = (dStartPos[0]+dEndPos[0])/2;
		dCenterY = (dStartPos[1]+dEndPos[1])/2;
		dAlignCenterX = dCenterX - offsetX;
		dAlignCenterY = dCenterY - offsetY;
		for(int i=0;i<ProductParam.IrregularRow;i++)
		{
			for(int j=0;j<ProductParam.IrregularColumn;j++)
			{
				tgTempPos = GetPadDispensePos(i,j);
				temID=j+i*ProductParam.IrregularColumn;
				PDposting[temID].bIsCompleted = false;
				PDposting[temID].bIsHasPad = true;
				PDposting[temID].Dx=tgTempPos.x;
				PDposting[temID].Dy=tgTempPos.y;
				PDposting[temID].Dz=dStartPos[2]+offsetZ;
				if(m_pPadDetect!=NULL)
				{
					if(m_pPadDetect[temID]==false)
					{
						//strTemp.Format("FirstRow:%d,FirstColumn:%d,SecondRow:%d,SecondColumn:%d",i,j,m,n);
						//AddMsg(strTemp);
						PDposting[temID].bIsHasPad = false;
					}
				}
				if(ONE_VALVE==ProductParam.valveSelect)
				{
					if(ProductParam.visionMode==VISION_TWO_MARK)
					{
						double dX = PDposting[temID].Dx - dCenterX;
						double dY = PDposting[temID].Dy - dCenterY;
						Rotation(dX,dY,-dAngle,dX,dY);
						PDposting[temID].Dx = dAlignCenterX + dX;
						PDposting[temID].Dy = dAlignCenterY + dY;
					}
					else
					{
						PDposting[temID].Dx -= offsetX;
						PDposting[temID].Dy -= offsetY;
						//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
						//AddMsg(strTemp);
					}
					PDposting[temID].Dx += ProductParam.DispOffsetX;
					PDposting[temID].Dy += ProductParam.DispOffsetY;
					if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&dStartPos[2],NULL))
					{
						AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
						return false;
					}
				}
				else if(TWO_VALVE==ProductParam.valveSelect)
				{
					if(ProductParam.visionMode==VISION_TWO_MARK)
					{
						if(j<(ProductParam.IrregularColumn+1)/2)
						{
							double dX = PDposting[temID].Dx - dCenterX;
							double dY = PDposting[temID].Dy - dCenterY;
							Rotation(dX,dY,-dAngle,dX,dY);
							PDposting[temID].Dx = dAlignCenterX + dX;
							PDposting[temID].Dy = dAlignCenterY + dY;
							//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
							//AddMsg(strTemp);
						}
					}
					else
					{
						PDposting[temID].Dx -= offsetX;
						PDposting[temID].Dy -= offsetY;
						//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
						//AddMsg(strTemp);
					}
					PDposting[temID].Dx += ProductParam.DispOffsetX;
					PDposting[temID].Dy += ProductParam.DispOffsetY;
					if(j<(ProductParam.IrregularColumn+1)/2)
					{
						if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&dStartPos[2],NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
					}
				}
				else
				{
					if(ProductParam.visionMode==VISION_TWO_MARK)
					{
						if(j<(ProductParam.IrregularColumn+2)/3)
						{
							double dX = PDposting[temID].Dx - dCenterX;
							double dY = PDposting[temID].Dy - dCenterY;
							Rotation(dX,dY,-dAngle,dX,dY);
							PDposting[temID].Dx = dAlignCenterX + dX;
							PDposting[temID].Dy = dAlignCenterY + dY;
							//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
							//AddMsg(strTemp);
						}
					}
					else
					{
						PDposting[temID].Dx -= offsetX;
						PDposting[temID].Dy -= offsetY;
						//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
						//AddMsg(strTemp);
					}
					PDposting[temID].Dx += ProductParam.DispOffsetX;
					PDposting[temID].Dy += ProductParam.DispOffsetY;
					if(j<(ProductParam.IrregularColumn+2)/3)
					{
						if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&dStartPos[2],NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
					}
				}
			}
		}
	}
	else
	{
		int nThirdNum = ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
		int nSecondNum = ProductParam.SecondDispRow*ProductParam.SecondDispColumn;
		int temID2=ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.FirstDispRow*ProductParam.FirstDispColumn;
		if (temID2<=0)
		{
			return false;
		}
		//strTemp.Format("tempID2:%d",temID2);
		//AddMsg(strTemp);
		//if(PDposting!=NULL)
		//{
		//	for(int i=0;i<temID2;i++)
		//	{
		//		strTemp.Format("PDposting[%d]:%.3f,%.3f",i,PDposting[i].Dx,PDposting[i].Dy);
		//		AddMsg(strTemp);
		//	}
		//}
		if (PDposting!=NULL)
		{
			LONGLONG llDueTime = CTimeUtil::GetDueTime(5000);
			while(!CTimeUtil::IsTimeout(llDueTime))
			{
				if(!m_bRefresh)
				{
					delete[] PDposting;
					PDposting = NULL;
					break;
				}
			}
			if(PDposting!=NULL)
			{
				AfxMessageBox("刷新界面超时！");
				return false;
			}
			//AddMsg("Delete PDposting");
		}
		PDposting=new tagDPostion[temID2];
		//0//1//2//3//4//5//6//7//
		//8//9//10/11/12//13/14//15//
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		///////////////////
		int temID = 0;
		for(int i=0;i<3;i++)
		{
			dStartPos[i] = ProductParam.DispenseStartPos[i];
			if(i==2)
			{
				dStartPos[i] -= ProductParam.dDispenseHeight;
			}
		}
		if(ONE_VALVE==ProductParam.valveSelect)
		{
			tgTempPos =GetPadDispensePos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,
				ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
			//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)*ProductParam.ThirdDispColumnD;
			//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
		}
		else if(TWO_VALVE==ProductParam.valveSelect)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,(ProductParam.FirstDispColumn-1)/2,ProductParam.SecondDispRow-1,
					ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)/3*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,
					(ProductParam.SecondDispColumn-1)/2,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)/3*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
			else
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,
					ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,(ProductParam.ThirdDispColumn-1)/2);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)/3*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,(ProductParam.FirstDispColumn-1)/3,ProductParam.SecondDispRow-1,
					ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)/3*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,
					(ProductParam.SecondDispColumn-1)/3,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)/3*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
			else
			{
				tgTempPos = GetPadDispensePos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,
					ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,(ProductParam.ThirdDispColumn-1)/3);
				//dEndPos[0] = dStartPos[0] + (ProductParam.FirstDispColumn-1)*ProductParam.FirstDispColumnD + (ProductParam.SecondDispColumn-1)*ProductParam.SecondDispColumnD + (ProductParam.ThirdDispColumn-1)/3*ProductParam.ThirdDispColumnD;
				//dEndPos[1] = dStartPos[1] + (ProductParam.FirstDispRow-1)*ProductParam.FirstDispRowD + (ProductParam.SecondDispRow-1)*ProductParam.SecondDispRowD + (ProductParam.ThirdDispRow-1)*ProductParam.ThirdDispRowD;
			}
		}
		dEndPos[0] = tgTempPos.x;
		dEndPos[1] = tgTempPos.y;
		dEndPos[2] = dStartPos[2];
		dCenterX = (dStartPos[0]+dEndPos[0])/2;
		dCenterY = (dStartPos[1]+dEndPos[1])/2;
		dAlignCenterX = dCenterX - offsetX;
		dAlignCenterY = dCenterY - offsetY;
		for(int i=0;i<ProductParam.FirstDispRow;i++)
		{
			for(int j=0;j<ProductParam.FirstDispColumn;j++)
			{
				for(int m=0;m<ProductParam.SecondDispRow;m++)
				{
					for(int n=0;n<ProductParam.SecondDispColumn;n++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int l=0;l<ProductParam.ThirdDispColumn;l++)
							{
								temID=l+k*ProductParam.ThirdDispColumn+n*nThirdNum+m*ProductParam.SecondDispColumn*nThirdNum+
									j*nSecondNum*nThirdNum+i*ProductParam.FirstDispColumn*nSecondNum*nThirdNum;
								tgTempPos = GetPadDispensePos(i,j,m,n,k,l);
								PDposting[temID].nFirstRow = i;
								PDposting[temID].nFirstColumn = j;
								PDposting[temID].nSecondRow = m;
								PDposting[temID].nSecondColumn = n;
								PDposting[temID].nThirdRow = k;
								PDposting[temID].nThirdColumn = l;
								PDposting[temID].bIsCompleted = false;
								PDposting[temID].bIsHasPad = true;
								PDposting[temID].Dx=tgTempPos.x;
								PDposting[temID].Dy=tgTempPos.y;
								PDposting[temID].Dz=dStartPos[2]+offsetZ;
								if(m_pPadDetect!=NULL)
								{
									if(m_pPadDetect[temID]==false)
									{
										//strTemp.Format("FirstRow:%d,FirstColumn:%d,SecondRow:%d,SecondColumn:%d",i,j,m,n);
										//AddMsg(strTemp);
										PDposting[temID].bIsHasPad = false;
									}
								}
								if(ONE_VALVE==ProductParam.valveSelect)
								{
									if(ProductParam.visionMode==VISION_TWO_MARK)
									{
										double dX = PDposting[temID].Dx - dCenterX;
										double dY = PDposting[temID].Dy - dCenterY;
										Rotation(dX,dY,-dAngle,dX,dY);
										PDposting[temID].Dx = dAlignCenterX + dX;
										PDposting[temID].Dy = dAlignCenterY + dY;
										//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
										//AddMsg(strTemp);
									}
									else
									{
										PDposting[temID].Dx -= offsetX;
										PDposting[temID].Dy -= offsetY;
										//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
										//AddMsg(strTemp);
									}
									PDposting[temID].Dx += ProductParam.DispOffsetX;
									PDposting[temID].Dy += ProductParam.DispOffsetY;
									if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
									{
										AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
										return false;
									}
								}
								else if(TWO_VALVE==ProductParam.valveSelect)
								{
									if(ProductParam.FirstDispColumn>1)
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(j<(ProductParam.FirstDispColumn+1)/2)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(j<(ProductParam.FirstDispColumn+1)/2)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
									else if(ProductParam.SecondDispColumn>1)
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(n<(ProductParam.SecondDispColumn+1)/2)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(n<(ProductParam.SecondDispColumn+1)/2)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
									else
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(l<(ProductParam.ThirdDispColumn+1)/2)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(l<(ProductParam.ThirdDispColumn+1)/2)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
								}
								else
								{
									if(ProductParam.FirstDispColumn>1)
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(j<(ProductParam.FirstDispColumn+2)/3)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(j<(ProductParam.FirstDispColumn+2)/3)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
									else if(ProductParam.SecondDispColumn>1)
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(n<(ProductParam.SecondDispColumn+2)/3)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(n<(ProductParam.SecondDispColumn+2)/3)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
									else
									{
										if(ProductParam.visionMode==VISION_TWO_MARK)
										{
											if(l<(ProductParam.ThirdDispColumn+2)/3)
											{
												double dX = PDposting[temID].Dx - dCenterX;
												double dY = PDposting[temID].Dy - dCenterY;
												Rotation(dX,dY,-dAngle,dX,dY);
												PDposting[temID].Dx = dAlignCenterX + dX;
												PDposting[temID].Dy = dAlignCenterY + dY;
												//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",dX,dY,temID);
												//m_pLog->log(strTemp);
											}
										}
										else
										{
											PDposting[temID].Dx -= offsetX;
											PDposting[temID].Dy -= offsetY;
											//strTemp.Format("OffsetX = %0.3f,OffsetY = %0.3f,temID = %d",offsetX,offsetY,temID);
											//m_pLog->log(strTemp);
										}
										PDposting[temID].Dx += ProductParam.DispOffsetX;
										PDposting[temID].Dy += ProductParam.DispOffsetY;
										if(l<(ProductParam.ThirdDispColumn+2)/3)
										{
											//strTemp.Format("PDispPos[%d](%0.3f,%0.3f,%0.3f)",temID,PDposting[temID].Dx,PDposting[temID].Dy,PDposting[temID].Dz);
											//m_pLog->log(strTemp);
											if(!theApp.m_Mv400.WarnCheckPos(&PDposting[temID].Dx,&PDposting[temID].Dy,&PDposting[temID].Dz,NULL))
											{
												AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
												return false;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return true;
}
// 运行
void CCmdRun::Run()
{
	CString str;
	DWORD StartTime,EndTime;
	DisCompCount=0;
	m_tOffset.x = 0.0;
	m_tOffset.y = 0.0;
	m_tOffset.z = 0.0;
	m_dRotateAngle = 0.0;
	m_bFirstDisp = true;
	m_bStartRun = true;
	if(m_bIsPause)
	{
		m_tStatus = K_RUN_STS_PAUSE;
	}
	else
	{
		m_tStatus = K_RUN_STS_RUN;
	}
	//if(!ManalRun)
	//{
	//	StartTime = GetTickCount();
	//	while(true)
	//	{
	//		EndTime = GetTickCount();
	//		if(IsExitRun())
	//		{
	//			return;
	//		}
	//		if(EndTime-StartTime>50000)
	//		{
	//			m_tStatus = K_RUN_STS_STOP;
	//			return;
	//		}
	//		Sleep(100);
	//	}
	//}
	//m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,FALSE);
	if(g_pFrm->m_wndPosInfo.TimeStarC)//自动运行
	{
		g_pFrm->m_wndPosInfo.TimeStarC=false;
		RunErrorID=-1;
	}
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			return;
		}
	}
	if(IsExitRun())
	{
		return;
	}
	str.Format("开始运行");
	m_pLog->log(str);
	CopyPadDtect();
	if ( !ProductParam.DispMode)//出胶模式
	{
		str.Format("V9Reset:%d",(int)V9RestOK);
		AddMsg(str);
		if (!V9RestOK)//
		{
			if(!RestDisP())
			{
				m_tStatus = K_RUN_STS_STOP;
				str.Format("阀体复位失败，运行停止");
				m_pLog->log(str);
				return;
			}
		}
		StartTime = EndTime = GetTickCount();
		while (!V9RestOK)//阀体复位是否成功
		{
			CFunction::DoEvents();
			EndTime= GetTickCount();
			if ((EndTime-StartTime)/1000>8)//4S
			{
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				RunErrorID=10;
				str.Format("阀体复位失败!");
				AddMsg(str);
				m_pLog->log(str);
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			Sleep(350);
		}
		g_pFrm->m_CmdRun.ProductParam.DispFCount=0;

		if(!ManalRun)
		{
			AutoRunCp=true;

			for (int i=0;i<3;i++)
			{
				if (g_pFrm->m_CmdRun.ProductParam.FSelectVal[i])
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=true;
					g_pFrm->m_CmdRun.ProductParam.DispFCount++;
				}
				else
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=false;
				}
			}
		}
		else
		{
			for (int i=0;i<3;i++)
			{
				if (g_pFrm->m_CmdRun.ProductParam.FSelectVal[i])
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=true;
					g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					AutoRunCp=false;
				}
				else
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=false;
				}
			}
		}
	}
	LONGLONG llDueDalay = CTimeUtil::GetDueTime(30000);
	while(!CTimeUtil::IsTimeout(llDueDalay))
	{
		if(!m_bValveReset)
		{
			break;
		}
		Sleep(1);
	}
	if(m_bValveReset)
	{
		RunErrorID = 29;
		str.Format("阀体复位超时，运行停止！");
		m_pLog->log(str);
		return;
	}
	if(ProductParam.SlotDetect)
	{
		StartTime = EndTime = GetTickCount();
		if(!SlotDetection())
		{
			if(IsExitRun())
			{
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = true;
			if(AfxMessageBox("请确认支架正反面！是否继续？",MB_YESNO)!=IDYES)
			{
				m_bIsSupend = false;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				RunErrorID = 18;
				m_tStatus = K_RUN_STS_STOP;
				str.Format("产品放反，运行停止");
				m_pLog->log(str);
				return;
			}
			m_bIsSupend = false;
		}
		EndTime = GetTickCount();
		str.Format("SlotDetection:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	if(ProductParam.inspectMode==SCAN_INSPECT)
	{
		StartTime = EndTime = GetTickCount();
		if(!ScanInspect())
		{
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			RunErrorID = 22;
			m_tStatus = K_RUN_STS_STOP;
			str.Format("扫描检测失败，运行停止");
			m_pLog->log(str);
			return;
		}
		EndTime = GetTickCount();
		str.Format("ScanInspect:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	else if(ProductParam.inspectMode==SESSION_INDPECT)
	{
		StartTime = EndTime = GetTickCount();
		if(!SpliceInspect(true))
		{
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			RunErrorID = 22;
			m_tStatus = K_RUN_STS_STOP;
			str.Format("分段检测失败，运行停止");
			m_pLog->log(str);
			return;
		}
		EndTime = GetTickCount();
		str.Format("SpliceInspect:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	if((ProductParam.visionMode==VISION_TWO_MARK)||(ProductParam.visionMode==VISION_ONE_MARK))
	{
		StartTime = EndTime = GetTickCount();
		//if(!FindTwoMark())
		while(m_bImageUse)
		{
			CTimeUtil::Delay(10);
		}
		m_bImageUse = true;
		bool bFindResult = FindImageOffset(m_tOffset.x,m_tOffset.y,m_dRotateAngle,false);
		m_bImageUse = false;
		if(!bFindResult)
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
			AddMsg("没有找到图像");
			m_bIsSupend = true;
			if(AfxMessageBox("图像查找失败！是否继续？",MB_YESNO)!=IDYES)
			{
				if(AfxMessageBox("跳过该片支架？",MB_YESNO)!=IDYES)
				{
					m_bIsSupend = false;
					m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
					str.Format("图像查找失败!");
					m_pLog->log(str);
					RunErrorID = 17;
					m_tStatus = K_RUN_STS_STOP;
					str.Format("图像查找失败，运行停止");
					m_pLog->log(str);
					return;
				}
				m_bIsSupend = false;
				if(!MoveToZSafety())
				{
					return;
				}
				m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,TRUE);
				Sleep(200);
				m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,FALSE);
				AddMsg("点胶结束,等待点胶信号!");
				AutoRunCp=false;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = false;
		}
		EndTime = GetTickCount();
		str.Format("FindMark:time = %ld,angle = %0.3f",EndTime-StartTime,m_dRotateAngle);
		AddMsg(str);
		if(fabs(m_dRotateAngle)>ProductParam.MaxOffsetAngle)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("偏移角度超过允许的角度，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_dRotateAngle = 0.0;
				m_bIsSupend = false;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				str.Format("角度偏移超出限制，运行停止");
				m_pLog->log(str);
				return;
			}
			m_bIsSupend = false;
		}
		if(fabs(m_tOffset.x)>ProductParam.MaxOffsetX||fabs(m_tOffset.y)>ProductParam.MaxOffsetY)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("位置偏移超过设定最大调整值，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_bIsSupend = false;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				str.Format("位置偏移超出限制，运行停止");
				m_pLog->log(str);
				return;
			}
			m_bIsSupend = false;
		}
	}
	if(ProductParam.MeasureHeightEnable)
	{
		StartTime = EndTime = GetTickCount();
		HEIGHT_STATUS ret = MeasureHeight(m_tOffset.z);
		EndTime = GetTickCount();
		str.Format("MeasureHeight:time = %ld,高度值 = %0.3f",EndTime-StartTime,m_tOffset.z);
		AddMsg(str);
		if(HEIGHT_STATUS_OK != ret)
		{
			if(HEIGHT_STATUS_EXCEED_LIMIT == ret)
			{
				m_bIsSupend = true;
				if(AfxMessageBox("高度偏移超过设定最大调整值，是否继续运行？",MB_YESNO)!=IDYES)
				{
					m_tOffset.z = 0.0;
					m_bIsSupend = false;
					m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
					m_tStatus = K_RUN_STS_STOP;
					str.Format("高度偏移超出限制，运行停止");
					m_pLog->log(str);
					return;
				}
				m_bIsSupend = false;
			}
			else
			{
				m_tOffset.z = 0.0;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				m_tStatus = K_RUN_STS_STOP;
				str.Format("测高错误，运行停止");
				m_pLog->log(str);
				return;
			}
		}
	}
	if (!ProductParam.DispMode)//出胶模式
	{
		if(!CleanAndTest(false))
		{
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			str.Format("首点清洗或试胶失败！");
			m_pLog->log(str);
			AfxMessageBox(str);
			return;
		}
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		RunErrorID = 30;
		m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		str.Format("开始点胶：设置坐标轴速度失败！");
		m_pLog->log(str);
		AfxMessageBox(str);
		return;
	}
	DispenseOperation();
	if(!SetAxisProfile(MEDIUM_VEL))
	{
		RunErrorID = 30;
		m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		str.Format("结束点胶：设置坐标轴速度失败！！");
		m_pLog->log(str);
		AfxMessageBox(str);
		return;
	}
	//Z轴回安全位置
	if(!MoveToZSafety())
	{
		return;
	}
	if(IsExitRun())
	{
		return;
	}
	if(ProductParam.DispFinishFill||V9DotRest)
	{
		DischargePosition(false);
		RunThreadValveReset();
		//m_bValveReset = true;
		//int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		//m_bValveReset = false;
		//if(nReturnValue>0)
		//{
		//	m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		//	RunErrorID=nReturnValue+5;
		//	AfxMessageBox("阀体复位失败！");
		//	return;
		//}
		//if(nReturnValue<0)
		//{
		//	m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		//	RunErrorID=-nReturnValue+1;
		//	AfxMessageBox("阀体复位失败！");
		//	return;
		//}
		//if(!theApp.m_V9Control.V9C_SetProfile())
		//{
		//	AfxMessageBox("阀体设置参数错误！");
		//	return;
		//}
		//V9DotRest = FALSE;
	}
	m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,TRUE);
	Sleep(200);
	m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,FALSE);
	str.Format("点胶结束,等待点胶信号!");
	AddMsg(str);
	m_pLog->log(str);
	AutoRunCp=false;
	m_tStatus = K_RUN_STS_STOP;
}
void CCmdRun::TestRun()
{
	CString str;
	DWORD StartTime,EndTime;
	DisCompCount=0;
	m_tOffset.x = 0.0;
	m_tOffset.y = 0.0;
	m_tOffset.z = 0.0;
	m_dRotateAngle = 0.0;
	m_bFirstDisp = true;
	m_bStartRun = true;
	if(m_bIsPause)
	{
		m_tStatus = K_RUN_STS_PAUSE;
	}
	else
	{
		m_tStatus = K_RUN_STS_RUN;
	}
	str.Format("测试点胶开始运行");
	m_pLog->log(str);
	if(g_pFrm->m_wndPosInfo.TimeStarC)//自动运行
	{
		g_pFrm->m_wndPosInfo.TimeStarC=false;
		RunErrorID=-1;
	}
	if (m_tStatus == K_RUN_STS_PAUSE)
	{
		if(!WaitPasueEnd())
		{
			m_bTestRunStop = true;
			return;
		}
	}
	if(IsExitRun())
	{
		m_bTestRunStop = true;
		return;
	}
	if ( !ProductParam.DispMode)//出胶模式
	{
		str.Format("V9Reset:%d",(int)V9RestOK);
		AddMsg(str);
		if (!V9RestOK)//
		{
			if(!RestDisP())
			{
				m_bTestRunStop = true;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
		}
		StartTime = EndTime = GetTickCount();
		while (!V9RestOK)//阀体复位是否成功
		{
			CFunction::DoEvents();
			EndTime= GetTickCount();
			if ((EndTime-StartTime)/1000>8)//4S
			{
				RunErrorID=10;
				str.Format("阀体复位失败!");
				AddMsg(str);
				m_pLog->log(str);
				m_bTestRunStop = true;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			Sleep(350);
		}
		g_pFrm->m_CmdRun.ProductParam.DispFCount=0;

		if(!ManalRun)
		{
			AutoRunCp=true;

			for (int i=0;i<3;i++)
			{
				if (g_pFrm->m_CmdRun.ProductParam.FSelectVal[i])
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=true;
					g_pFrm->m_CmdRun.ProductParam.DispFCount++;
				}
				else
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=false;
				}
			}
		}
		else
		{
			for (int i=0;i<3;i++)
			{
				if (g_pFrm->m_CmdRun.ProductParam.FSelectVal[i])
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=true;
					g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					AutoRunCp=false;
				}
				else
				{
					g_pFrm->m_CmdRun.RunDispFSelect[i]=false;
				}
			}
		}
	}
	LONGLONG llDueDalay = CTimeUtil::GetDueTime(30000);
	while(!CTimeUtil::IsTimeout(llDueDalay))
	{
		if(!m_bValveReset)
		{
			break;
		}
		Sleep(1);
	}
	if(m_bValveReset)
	{
		RunErrorID = 29;
		AfxMessageBox("阀体复位失败！");
		return;
	}
	if(ProductParam.SlotDetect)
	{
		StartTime = EndTime = GetTickCount();
		if(!SlotDetection())
		{
			if(IsExitRun())
			{
				m_bTestRunStop = true;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = true;
			if(AfxMessageBox("请确认支架正反面！是否继续？",MB_YESNO)!=IDYES)
			{
				m_bTestRunStop = true;
				m_bIsSupend = false;
				RunErrorID = 18;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = false;
		}
		EndTime = GetTickCount();
		str.Format("SlotDetection:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	if(ProductParam.inspectMode==SCAN_INSPECT)
	{
		StartTime = EndTime = GetTickCount();
		if(!ScanInspect())
		{
			RunErrorID = 22;
			m_tStatus = K_RUN_STS_STOP;
			m_bTestRunStop = true;
			return;
		}
		EndTime = GetTickCount();
		str.Format("ScanInspect:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	else if(ProductParam.inspectMode==SESSION_INDPECT)
	{
		StartTime = EndTime = GetTickCount();
		if(!SpliceInspect(true))
		{
			m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
			RunErrorID = 22;
			m_tStatus = K_RUN_STS_STOP;
			str.Format("分段检测失败，运行停止");
			m_pLog->log(str);
			return;
		}
		EndTime = GetTickCount();
		str.Format("SpliceInspect:%ld",EndTime-StartTime);
		AddMsg(str);
	}
	if(ProductParam.visionMode==VISION_TWO_MARK)
	{
		StartTime = EndTime = GetTickCount();
		//if(!FindTwoMark())
		if(!FindImageOffset(m_tOffset.x,m_tOffset.y,m_dRotateAngle,false))
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
			AddMsg("没有找到图像");
			m_bIsSupend = true;
			if(AfxMessageBox("图像查找失败！是否继续？",MB_YESNO)!=IDYES)
			{
				m_bIsSupend = false;
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				m_bTestRunStop = true;
				return;
			}
			m_bIsSupend = false;
		}
		EndTime = GetTickCount();
		str.Format("FindMark:time = %ld,angle = %0.3f",EndTime-StartTime,m_dRotateAngle);
		AddMsg(str);
		if(fabs(m_dRotateAngle)>ProductParam.MaxOffsetAngle)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("偏移角度超过允许的角度，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_bIsSupend = false;
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				m_bTestRunStop = true;
				return;
			}
			m_bIsSupend = false;
		}
		if(fabs(m_tOffset.x)>2||fabs(m_tOffset.y)>2)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("位置偏移超过2mm，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_dRotateAngle = 0.0;
				m_bIsSupend = false;
				str.Format("位置偏移超过2mm");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			if(AfxMessageBox("是否调整位置偏移？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_dRotateAngle = 0.0;
			}
			m_bIsSupend = false;
		}
	}
	if(ProductParam.MeasureHeightEnable)
	{
		StartTime = EndTime = GetTickCount();
		HEIGHT_STATUS ret = MeasureHeight(m_tOffset.z);
		EndTime = GetTickCount();
		str.Format("MeasureHeight:time = %ld,高度值 = %0.3f",EndTime-StartTime,m_tOffset.z);
		AddMsg(str);
		if(HEIGHT_STATUS_OK != ret)
		{
			if(HEIGHT_STATUS_EXCEED_LIMIT == ret)
			{
				m_bIsSupend = true;
				if(AfxMessageBox("高度偏移超过设定最大调整值，是否继续运行？",MB_YESNO)!=IDYES)
				{
					m_tOffset.z = 0.0;
					m_bIsSupend = false;
					m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
					m_tStatus = K_RUN_STS_STOP;
					str.Format("高度偏移超出限制，运行停止");
					m_pLog->log(str);
					return;
				}
			}
			else
			{
				m_tOffset.z = 0.0;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				m_tStatus = K_RUN_STS_STOP;
				str.Format("测高错误，运行停止");
				m_pLog->log(str);
				return;
			}
		}
	}
	if ( !ProductParam.DispMode)//出胶模式
	{
		if(!CleanAndTest(false))
		{
			AfxMessageBox("首点清洗与试胶失败！");
			m_bTestRunStop = true;
			return;
		}
	}
	if(!MoveToZSafety())
	{
		AfxMessageBox("移动到安全位置失败!");
		return;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		AfxMessageBox("测试运行开始：设置坐标轴速度失败！");
		m_bTestRunStop = true;
		return;
	}
	DispenseOperation();
	if(!SetAxisProfile(MEDIUM_VEL))
	{
		AfxMessageBox("测试运行结束：设置坐标轴速度失败！");
		m_bTestRunStop = true;
		return;
	}
	//Z轴回安全位置
	if(!MoveToZSafety())
	{
		m_bTestRunStop = true;
		return;
	}
	if(IsExitRun())
	{
		m_bTestRunStop = true;
		return;
	}
	if(ProductParam.DispFinishFill||V9DotRest)
	{
		//m_bValveReset = true;
		//int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
		//m_bValveReset = false;
		//if(nReturnValue>0)
		//{
		//	RunErrorID=nReturnValue+5;
		//	AfxMessageBox("阀体复位失败！");
		//	m_bTestRunStop = true;
		//	return;
		//}
		//if(nReturnValue<0)
		//{
		//	RunErrorID=-nReturnValue+1;
		//	AfxMessageBox("阀体复位失败！");
		//	m_bTestRunStop = true;
		//	return;
		//}
		//if(!theApp.m_V9Control.V9C_SetProfile())
		//{
		//	AfxMessageBox("阀体设置参数错误！");
		//	m_bTestRunStop = true;
		//	return;
		//}
		//V9DotRest=FALSE;
		DischargePosition(false);
		RunThreadValveReset();
	}
	str.Format("测试点胶结束,等待点胶信号!");
	AddMsg(str);
	m_pLog->log(str);
	AutoRunCp=false;
	m_tStatus = K_RUN_STS_STOP;
}

void CCmdRun::ValveReset()
{
	m_bValveReset = true;
	int nReturnValue = theApp.m_V9Control.V9C_Rest(K_ALL_AXIS);
	m_bValveReset = false;
	if(nReturnValue>0)
	{
		m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		RunErrorID=nReturnValue+5;
		AfxMessageBox("阀体复位失败！");
		return;
	}
	if(nReturnValue<0)
	{
		m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
		RunErrorID=-nReturnValue+1;
		AfxMessageBox("阀体复位失败！");
		return;
	}
	if(!theApp.m_V9Control.V9C_SetProfile())
	{
		AfxMessageBox("阀体设置参数错误！");
		return;
	}
	V9DotRest = FALSE;
}
// 复位
void CCmdRun::Home()
{
	CString str;
	if(g_pFrm->m_CmdRun.m_tStatus==K_RUN_STS_EMERGENCY)
	{
		AfxMessageBox(_T("急停状态不能回原点!"));
		return;
	}
	if(!g_pFrm->m_CmdRun.ManalRun)
	{
		AfxMessageBox(_T("自动模式不能手动回原点!"));
		return;
	}
	//if(g_pFrm->bIsAlignDlgVisible||g_pFrm->bIsCalibVisible||g_pFrm->bIsCustomVisible||
	//	g_pFrm->bIsDebugHeightVisible||g_pFrm->bIsDebugNeedleVisible||g_pFrm->bIsRCDDlgVisible)
	//{
	//	AfxMessageBox("请关闭对话框，在启动复位！");
	//	return;
	//}
	if(g_pFrm->bAutoDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAutoAlign.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bAutoDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bImagePosVisible)
	{
		::SendMessage(g_pFrm->m_dlgImagePos.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bImagePosVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsAlignDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgAlignNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsAlignDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCalibVisible)
	{
		::SendMessage(g_pFrm->m_dlgCalibration.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCalibVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCustomVisible)
	{
		::SendMessage(g_pFrm->m_dlgCustom.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCustomVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugHeightVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugHeightVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsDebugNeedleVisible)
	{
		::SendMessage(g_pFrm->m_dlgDebugNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsDebugNeedleVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsRCDDlgVisible)
	{
		::SendMessage(g_pFrm->m_dlgRCD.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsRCDDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsCtrlDlgVisible)
	{
		//g_pFrm->m_dlgCtrl.OnDlgExit();
		::SendMessage(g_pFrm->m_dlgCtrl.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsCtrlDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->IsV9SetDlgVisible)
	{
		//g_pFrm->m_V9Param.OnV9SetExit();
		::SendMessage(g_pFrm->m_V9Param.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->IsV9SetDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsNeedleDlgVisible)
	{
		//g_pFrm->m_dlgNeedle.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgNeedle.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsNeedleDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(g_pFrm->bIsHeightDlgVisible)
	{
		//g_pFrm->m_dlgHeight.OnExitDlg();
		::SendMessage(g_pFrm->m_dlgHeight.m_hWnd,WM_CLOSE,0,0);
		while(g_pFrm->bIsHeightDlgVisible)
		{
			CTimeUtil::Delay(10);
		}
	}
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		CString strError;
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能回原点！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能回原点！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能回原点！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能回原点！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能回原点！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能回原点！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能回原点！");
		}
		m_pLog->log(strError);
		return;
	}
	static bool b = false;
	if(b) return;
	b = true;//在回零中不响应回零

	if(g_pFrm->m_CmdRun.m_tStatus == K_RUN_STS_RUN || g_pFrm->m_CmdRun.m_tStatus==K_RUN_STS_PAUSE)
	{
		AfxMessageBox("运行或暂停状态不能回原点!");
		b = false;
		return;
	}

	//if (g_pFrm->m_wndPosInfo.PlcEorrTag)
	//{
	//	m_pMv->SetOutput(theApp.m_tSysParam.outPlcRest, true);
	//	Sleep(200);
	//	m_pMv->SetOutput(theApp.m_tSysParam.outPlcRest, false);
	//	g_pFrm->m_wndPosInfo.PlcEorrTag=false;
	//}
	m_pMv->SetOutput(theApp.m_tSysParam.outRed, false);
	m_pMv->SetOutput(theApp.m_tSysParam.outGreen ,true);
	m_pMv->SetOutput(theApp.m_tSysParam.outYellow, false);

	m_bHoming = true;
	if (g_pFrm->m_CmdRun.RunErrorID==0)//伺服报警
	{
		for (int i=1;i<4;i++)
		{
			m_pMv->AxisClrsts(i); 
		}
		Sleep(500);
		for(int i=1;i<4;i++)
		{
			long lAxisSts = 0;
			theApp.m_Mv400.GetAxisSts(i,&lAxisSts);
			if((lAxisSts&0x02)==0x02)
			{
				b = false;
				m_bHoming = false;
				AfxMessageBox("伺服报警未清除，请断电重启后再试!");
				return;
			}
		}
		Sleep(500);
	}
	g_pFrm->m_CmdRun.RunErrorID=-1;
	g_pFrm->m_CmdRun.m_tStatus = K_RUN_STS_NONE;
	//m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,TRUE);
	//g_pFrm->m_CmdRun.m_tStatus = K_RUN_STS_NONE;
	//Sleep(200);
	//m_pMv->SetOutput(theApp.m_tSysParam.outDispenseFinish,FALSE);//清料 PLC

	theApp.m_tSysParam.ThreeAxHomeSu=false;
	if(!(m_pMv->Home(50,5,1000)))
	{
		b = false;
		theApp.m_tSysParam.ThreeAxHomeSu=false;
		m_bHoming = false;
		AfxMessageBox("回原点失败请重新回零!");
		return;
	}
	if(!g_pFrm->m_CmdRun.SetAxisProfile(MEDIUM_VEL))
	{
		b = false;
		m_bHoming = false;
		AfxMessageBox("电机参数设置出错！");
		return;
	}
	m_bHoming = false;

	if (g_pFrm->m_wndPosInfo.PlcEorrTag)
	{
		g_pFrm->m_wndPosInfo.PlcEorrTag=false;
		g_pFrm->m_wndPosInfo.bRecordError = false;
		g_pFrm->m_CmdRun.m_bPlcRunError = false;
	}

	g_pFrm->m_CmdRun.m_tStatus = K_RUN_STS_STOP;
	theApp.m_tSysParam.ThreeAxHomeSu=true;
	g_pFrm->m_CmdRun.RunErrorID=-1;
	g_pFrm->m_wndPosInfo.PlcRTag=false;
	g_pFrm->m_wndPosInfo.ErrorVal=0;
	g_pFrm->m_wndPosInfo.ErrorPlcData=0;
	g_pFrm->m_wndPosInfo.bRecordError = false;
	b = false;
	if(theApp.m_tSysParam.V9HomeSu&&theApp.m_tSysParam.ThreeAxHomeSu)
	{
		theApp.m_Mv400.SetOutput(theApp.m_tSysParam.outReady,TRUE);
	}
	else
	{
		theApp.m_Mv400.SetOutput(theApp.m_tSysParam.outReady,FALSE);
		str.Format("ThreeAxHomeSu:%d,V9HomeSu:%d",theApp.m_tSysParam.ThreeAxHomeSu,theApp.m_tSysParam.V9HomeSu);
		AddMsg(str);
	}
}

bool CCmdRun::FindTwoCenter()
{
	CString str;
	double dX=0.0,dY=0.0;
	int nBmpTestCount=0;
	double dBmpPosOff=0.0;
	double dOffsetX1=0.0,dOffsetY1=0.0,dOffsetX2=0.0,dOffsetY2=0.0;
	if(!MoveToZSafety())
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	tgPos tgStartPos = GetFirstCameraPos();
	tgPos tgEndPos = GetLastCameraPos();

	if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y,true))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	if(!SynchronizeMoveZ(tgEndPos.z,true))
	{
		return false;
	}

	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	while(!g_pView->m_ImgStatic.FindBlobCenter(theApp.m_tSysParam.BmpROI[1],dX,dY))
	{
		nBmpTestCount++;
		dBmpPosOff = 3*nBmpTestCount;
		if(!SynchronizeMoveXY(tgEndPos.x-dBmpPosOff,tgEndPos.y,true))
		{
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			return false;
		}
		if(nBmpTestCount>3)
		{
			AddMsg("图像位置2检测异常");
			return false;
		}
		if(IsExitRun())
		{
			return false;
		}
	}
	g_pView->m_ImgStatic.m_dDisplayCenterX[3] = dX;
	g_pView->m_ImgStatic.m_dDisplayCenterY[3] = dY;
	dOffsetX2 = (dX-theApp.m_tSysParam.BmpCenterX[1])*theApp.m_tSysParam.BmpScale-dBmpPosOff;
	dOffsetY2 = (dY-theApp.m_tSysParam.BmpCenterY[1])*theApp.m_tSysParam.BmpScale;
	str.Format("取图 %d次，右下角图像偏移x=  %0.3f y= %0.3f",nBmpTestCount+1,dOffsetX2,dOffsetY2);
	AddMsg(str);

	nBmpTestCount = 0;
	dBmpPosOff = 0.0;
	if(!MoveToZSafety())
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y,true))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	if(!SynchronizeMoveZ(tgStartPos.z,true))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		return false;
	}
	while(!g_pView->m_ImgStatic.FindBlobCenter(theApp.m_tSysParam.BmpROI[0],dX,dY))
	{
		nBmpTestCount++;
		dBmpPosOff = 3*nBmpTestCount;
		if(!SynchronizeMoveXY(tgStartPos.x-dBmpPosOff,tgStartPos.y,true))
		{
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			return false;
		}
		if(nBmpTestCount>3)
		{
			AddMsg("图像位置1检测异常");
			return false;
		}
		if(IsExitRun())
		{
			return false;
		}
	}
	g_pView->m_ImgStatic.m_dDisplayCenterX[2] = dX;
	g_pView->m_ImgStatic.m_dDisplayCenterY[2] = dY;
	dOffsetX1 = (dX-theApp.m_tSysParam.BmpCenterX[0])*theApp.m_tSysParam.BmpScale-dBmpPosOff;
	dOffsetY1 = (dY-theApp.m_tSysParam.BmpCenterY[0])*theApp.m_tSysParam.BmpScale;
	str.Format("取图 %d次，左上角图像偏移y=  %0.3f y= %0.3f",nBmpTestCount+1,dOffsetX1,dOffsetY1);
	AddMsg(str);

	m_tOffset.x = (dOffsetX1+dOffsetX2)/2;
	m_tOffset.y = (dOffsetY1+dOffsetY2)/2;
	m_dRotateAngle = CalculateAngle((tgEndPos.x+dOffsetX2)-(tgStartPos.x+dOffsetX1),(tgEndPos.y-dOffsetY2)-(tgStartPos.y-dOffsetY1))-
		CalculateAngle(tgEndPos.x-tgStartPos.x,tgEndPos.y-tgStartPos.y);
	if(abs(m_tOffset.x)>2)
	{
		m_tOffset.x = 0;
	}
	if(abs(m_tOffset.y)>2)
	{
		m_tOffset.y = 0;
	}
	str.Format("图像偏移OffsetX=  %0.3f,OffsetY= %0.3f,RotateAngle = %0.3f",m_tOffset.x,m_tOffset.y,m_dRotateAngle);
	AddMsg(str);
	return true;
}

bool CCmdRun::FindTwoMark()
{
	CString strError;
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		strError.Format("未知错误");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能查找Mark点！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能查找Mark点");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能查找Mark点");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能查找Mark点");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能查找Mark点");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能查找Mark点");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能查找Mark点！");
		}
		m_pLog->log(strError);
		return false;
	}
	strError.Format("开始查找Mark点");
	m_pLog->log(strError);
	m_bSearchMark = true;
	CString strFile,strText;
	int nIndex;
	double dCenterX[2];
	double dCenterY[2];
	double dAngle[2];
	double dOffsetX1,dOffsetY1,dOffsetX2,dOffsetY2;
	double dBmpOffset = 0.5;
	tgPos tgEndBmpOffset,tgStartBmpOffset;
	bool bMamualAlign = false;
	tgEndBmpOffset.x = 0.0;
	tgEndBmpOffset.y = 0.0;
	tgStartBmpOffset.x = 0.0;
	tgStartBmpOffset.y = 0.0;
	dOffsetX1 = 0.0;
	dOffsetY1 = 0.0;
	dOffsetX2 = 0.0;
	dOffsetY2 = 0.0;
	if(!MoveToZSafety())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(IsExitRun())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	tgPos tgStartPos = ProductParam.tgImagePos[0];
	tgPos tgEndPos = ProductParam.tgImagePos[1];

	if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y,true))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(IsExitRun())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(!SynchronizeMoveZ(tgEndPos.z,true))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}

	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	nIndex = 1;
	strFile = g_pDoc->GetModeFile(nIndex);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[1]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	//if(!milApp.FindModel())
	//{
	//	AddMsg("图像位置2检测异常");
	//	return false;
	//}
	while(!milApp.FindModel())
	{
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgEndPos.x-dBmpOffset,tgEndPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = -dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y-dBmpOffset,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = -dBmpOffset;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgEndPos.x+dBmpOffset,tgEndPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgEndPos.x+dBmpOffset,tgEndPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = dBmpOffset;
			break;
		}
		AddMsg("图像位置2检测异常");
		m_bIsSupend = true;
		if(AfxMessageBox("手动查找图像",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		else
		{
			CDlgManualAlign manualAlign;
			if(IDOK!=manualAlign.DoModal())
			{
				m_bIsSupend = false;
				m_bSearchMark = false;
				strError.Format("Mark点查找失败");
				m_pLog->log(strError);
				return false;
			}
			else
			{
				dOffsetX2 = tgEndPos.x - m_pMv->GetPos(K_AXIS_X);
				dOffsetY2 = tgEndPos.y - m_pMv->GetPos(K_AXIS_Y);
				tgEndBmpOffset.x = 0;
				tgEndBmpOffset.y = 0;
				bMamualAlign = true;
				m_bIsSupend = false;
				break;
			}
		}
		m_bIsSupend = false;
	}
	if(!bMamualAlign)
	{
		dCenterX[1] = milApp.m_stResult.dResultCenterX[0];
		dCenterY[1] = milApp.m_stResult.dResultCenterY[0];
		dAngle[1] = milApp.m_stResult.dResultAngle[0];
		strText.Format("左上角图像查找结果:CenterX=%.3f,CenterY=%.3f,Angle=%.3f,Score=%.3f",milApp.m_stResult.dResultCenterX[0],
			milApp.m_stResult.dResultCenterY[0],milApp.m_stResult.dResultAngle[0],milApp.m_stResult.dResultScore[0]);
		AddMsg(strText);
		theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(dCenterX[1]-(milApp.m_lBufSizeX-1)/2,
			dCenterY[1]-(milApp.m_lBufSizeY-1)/2,dOffsetX2,dOffsetY2);
		dOffsetX2 -= tgEndBmpOffset.x;
		dOffsetY2 -= tgEndBmpOffset.y;
	}
	strText.Format("左上角图像偏移:OffsetX=%.3f,OffsetY=%.3f",dOffsetX2,dOffsetY2);
	AddMsg(strText);

	bMamualAlign = false;
	//m_pMv->GotoSafeZPos();
	if(IsExitRun())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y,true))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(IsExitRun())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(!SynchronizeMoveZ(tgStartPos.z,true))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	if(IsExitRun())
	{
		m_bSearchMark = false;
		strError.Format("Mark点查找失败");
		m_pLog->log(strError);
		return false;
	}
	nIndex = 0;
	strFile = g_pDoc->GetModeFile(nIndex);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[0]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	//strFile = g_pDoc->GetModeFile(nIndex);
	//milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	//milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	//milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[nIndex]);
	//milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI[nIndex]);
	//if(!milApp.FindModel())
	//{
	//	AddMsg("图像位置1检测异常");
	//	return false;
	//}
	while(!milApp.FindModel())
	{
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgStartPos.x-dBmpOffset,tgStartPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = -dBmpOffset;
			tgStartBmpOffset.y = 0.0;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y-dBmpOffset,true))
		{
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			m_bSearchMark = false;
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = 0.0;
			tgStartBmpOffset.y = -dBmpOffset;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgStartPos.x+dBmpOffset,tgStartPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = dBmpOffset;
			tgStartBmpOffset.y = 0.0;
			break;
		}
		if(IsExitRun())
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(!SynchronizeMoveXY(tgStartPos.x+dBmpOffset,tgStartPos.y,true))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		if(!g_pView->m_ImgStatic.CopyImage(RGB8))
		{
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = 0.0;
			tgStartBmpOffset.y = dBmpOffset;
			break;
		}
		AddMsg("图像位置1检测异常");
		m_bIsSupend = true;
		if(AfxMessageBox("手动查找图像",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			m_bSearchMark = false;
			strError.Format("Mark点查找失败");
			m_pLog->log(strError);
			return false;
		}
		else
		{
			CDlgManualAlign manualAlign;
			if(IDOK!=manualAlign.DoModal())
			{
				m_bIsSupend = false;
				m_bSearchMark = false;
				strError.Format("Mark点查找失败");
				m_pLog->log(strError);
				return false;
			}
			else
			{
				dOffsetX1 = tgStartPos.x - m_pMv->GetPos(K_AXIS_X);
				dOffsetY1 = tgStartPos.y - m_pMv->GetPos(K_AXIS_Y);
				tgStartBmpOffset.x = 0;
				tgStartBmpOffset.y = 0;
				bMamualAlign = true;
				m_bIsSupend = false;
				break;
			}
		}
		m_bIsSupend = false;
	}
	if(!bMamualAlign)
	{
		dCenterX[0] = milApp.m_stResult.dResultCenterX[0];
		dCenterY[0] = milApp.m_stResult.dResultCenterY[0];
		dAngle[0] = milApp.m_stResult.dResultAngle[0];
		strText.Format("右下角角图像查找结果:CenterX=%.3f,CenterY=%.3f,Angle=%.3f,Score=%.3f",milApp.m_stResult.dResultCenterX[0],
			milApp.m_stResult.dResultCenterY[0],milApp.m_stResult.dResultAngle[0],milApp.m_stResult.dResultScore[0]);
		AddMsg(strText);

		theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(dCenterX[0]-(milApp.m_lBufSizeX-1)/2,
			dCenterY[0]-(milApp.m_lBufSizeY-1)/2,dOffsetX1,dOffsetY1);
		dOffsetX1 -= tgStartBmpOffset.x;
		dOffsetY1 -= tgStartBmpOffset.y;
	}
	strText.Format("右下角图像偏移:OffsetX=%.3f,OffsetY=%.3f",dOffsetX1,dOffsetY1);
	AddMsg(strText);

	m_tOffset.x = (dOffsetX1+dOffsetX2)/2;
	m_tOffset.y = (dOffsetY1+dOffsetY2)/2;
	m_dRotateAngle = CalculateAngle((tgEndPos.x-dOffsetX2)-(tgStartPos.x-dOffsetX1),(tgEndPos.y-dOffsetY2)-(tgStartPos.y-dOffsetY1))-
		CalculateAngle(tgEndPos.x-tgStartPos.x,tgEndPos.y-tgStartPos.y);
	strText.Format("图像偏移:OffsetX=%.3f,OffsetY=%.3f,Angle=%.3f",m_tOffset.x,m_tOffset.y,m_dRotateAngle);
	AddMsg(strText);
	m_bSearchMark = false;
	strError.Format("Mark点查找成功");
	m_pLog->log(strError);
	return true;
}

bool CCmdRun::SlotDetection()
{
	if(m_bCleanNeedle||m_bDischarge||m_bTestDispense||m_bSearchMark||m_bSlotDetect||m_bHoming||m_bMeasureHeight)
	{
		CString strError;
		strError.Format("未知错误！");
		if(m_bCleanNeedle)
		{
			strError.Format("清洗针头时，不能正反检测！");
		}
		else if(m_bDischarge)
		{
			strError.Format("排胶时，不能正反检测！");
		}
		else if(m_bTestDispense)
		{
			strError.Format("试胶时，不能正反检测！");
		}
		else if(m_bSearchMark)
		{
			strError.Format("查找Mark点时，不能正反检测！");
		}
		else if(m_bSlotDetect)
		{
			strError.Format("正反检测时，不能正反检测！");
		}
		else if(m_bHoming)
		{
			strError.Format("复位时，不能正反检测！");
		}
		else if(m_bMeasureHeight)
		{
			strError.Format("测高时，不能正反检测！");
		}
		m_pLog->log(strError);
		return false;
	}
	m_bSlotDetect = true;
	tgPos tgDetectPos;
	tgDetectPos.x = ProductParam.tSlotDetectPos.x;
	tgDetectPos.y = ProductParam.tSlotDetectPos.y;
	tgDetectPos.z = ProductParam.tSlotDetectPos.z;
	if(!MoveToZSafety())
	{
		m_bSlotDetect = false;
		return false;
	}
	if(IsExitRun())
	{
		m_bSlotDetect = false;
		return false;
	}
	if(!SynchronizeMoveXY(tgDetectPos.x,tgDetectPos.y,true))
	{
		m_bSlotDetect = false;
		return false;
	}
	if(IsExitRun())
	{
		m_bSlotDetect = false;
		return false;
	}
	if(!SynchronizeMoveZ(tgDetectPos.z,true))
	{
		m_bSlotDetect = false;
		return false;
	}
	if(IsExitRun())
	{
		m_bSlotDetect = false;
		return false;
	}
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		m_bSlotDetect = false;
		return false;
	}
	int nIndex = g_pFrm->m_CmdRun.ProductParam.nImageNum;
	CString strFile = g_pDoc->GetModeFile(nIndex);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpSlotAcceptance,theApp.m_tSysParam.BmpSlotAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpSlotLearnWin);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpSlotROI);
	if(!milApp.FindModel())
	{
		MoveToZSafety();
		AddMsg("请确认支架是否放反");
		m_bSlotDetect = false;
		return false;
	}
	if(!MoveToZSafety())
	{
		m_bSlotDetect = false;
		return false;
	}
	m_bSlotDetect = false;
	return true;
}
bool CCmdRun::FindPatternCenter(double dX,double dY,double dZ,double &dOffsetX,double &dOffsetY,double &dAngle)
{
	CString strFile;
	if(!MoveToZSafety())
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	if(!SynchronizeMoveXY(dX+ProductParam.BmpCalibrationPosition[0],dY+ProductParam.BmpCalibrationPosition[1],true))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	if(!SynchronizeMoveZ(dZ+ProductParam.BmpCalibrationPosition[2],true))
	{
		return false;
	}
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	strFile = g_pDoc->GetModeFile(0);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpPatternAcceptance,theApp.m_tSysParam.BmpPatternAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpPatternLearnWin);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpPatternROI);
	if(!milApp.FindModel())
	{
		AddMsg("图像位置检测异常");
		return false;
	}
	dOffsetX = (milApp.m_stResult.dResultCenterX[0]-(milApp.m_lBufSizeX-1)/2)*theApp.m_tSysParam.BmpPatternScale;
	dOffsetY = (milApp.m_stResult.dResultCenterY[0]-(milApp.m_lBufSizeY-1)/2)*theApp.m_tSysParam.BmpPatternScale;
	dAngle = milApp.m_stResult.dResultAngle[0];
	return true;
}

void CCmdRun::SelectDispense(bool *bIsDispense)
{
	//int nCountNum = ProductParam.FirstDispRow*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn;
	CString str;
	m_tOffset.x = 0.0;
	m_tOffset.y = 0.0;
	m_tOffset.z = 0.0;
	m_dRotateAngle = 0.0;
	DisCompCount = 0;
	DWORD StartTime,EndTime;
	StartTime = EndTime = GetTickCount();
	m_tStatus = K_RUN_STS_RUN;
	if(ProductParam.visionMode==VISION_TWO_MARK)
	{
		StartTime = EndTime = GetTickCount();
		if(!FindTwoMark())
		//if(!FindImageOffset(m_tOffset.x,m_tOffset.y,m_dRotateAngle,false))
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
			AddMsg("没有找到图像");
			m_bIsSupend = true;
			if(AfxMessageBox("图像查找失败！是否继续？",MB_YESNO)!=IDYES)
			{
				m_bIsSupend = false;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = false;
		}
		EndTime = GetTickCount();
		str.Format("FindMark:%ld",EndTime-StartTime);
		AddMsg(str);
		if(fabs(m_dRotateAngle)>ProductParam.MaxOffsetAngle)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("偏移角度超过允许的角度，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_dRotateAngle = 0.0;
				m_bIsSupend = false;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			m_bIsSupend = false;
		}
		if(fabs(m_tOffset.x)>ProductParam.MaxOffsetX||fabs(m_tOffset.y)>ProductParam.MaxOffsetY)
		{
			m_bIsSupend = true;
			if(AfxMessageBox("位置偏移超过2mm，是否继续运行？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_dRotateAngle = 0.0;
				m_bIsSupend = false;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				str.Format("图像查找失败!");
				m_pLog->log(str);
				RunErrorID = 17;
				m_tStatus = K_RUN_STS_STOP;
				return;
			}
			if(AfxMessageBox("是否调整位置偏移？",MB_YESNO)!=IDYES)
			{
				m_tOffset.x = 0.0;
				m_tOffset.y = 0.0;
				m_dRotateAngle = 0.0;
			}
			m_bIsSupend = false;
		}
	}
	if(ProductParam.MeasureHeightEnable)
	{
		StartTime = EndTime = GetTickCount();
		HEIGHT_STATUS ret = MeasureHeight(m_tOffset.z);
		EndTime = GetTickCount();
		str.Format("MeasureHeight:time = %ld,高度值 = %0.3f",EndTime-StartTime,m_tOffset.z);
		AddMsg(str);
		if(HEIGHT_STATUS_OK != ret)
		{
			if(HEIGHT_STATUS_EXCEED_LIMIT == ret)
			{
				m_bIsSupend = true;
				if(AfxMessageBox("高度偏移超过设定最大调整值，是否继续运行？",MB_YESNO)!=IDYES)
				{
					m_tOffset.z = 0.0;
					m_bIsSupend = false;
					m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
					m_tStatus = K_RUN_STS_STOP;
					str.Format("高度偏移超出限制，运行停止");
					m_pLog->log(str);
					return;
				}
			}
			else
			{
				m_tOffset.z = 0.0;
				m_pMv->SetOutput(theApp.m_tSysParam.outReady,FALSE);
				m_tStatus = K_RUN_STS_STOP;
				str.Format("测高错误，运行停止");
				m_pLog->log(str);
				return;
			}
		}
	}
	if(!CleanAndTest(false))
	{
		AfxMessageBox("首点清洗与试胶失败！");
		return;
	}
	if(!ExtandTrack(m_tOffset.x,m_tOffset.y,m_tOffset.z,m_dRotateAngle))
	{
		g_pFrm->m_CmdRun.AddMsg("ExtandTrack Failed!");
		m_tStatus = K_RUN_STS_STOP;
		Stop();
		return;
	}
	bool bSelect[3];
	for(int i=0;i<3;i++)
	{
		bSelect[i] = ProductParam.FSelectVal[i];
		RunDispFSelect[i] = false;
	}
	if(!SetAxisProfile(HIGH_VEL))
	{
		return;
	}
	if(!MoveToZSafety())
	{
		return;
	}
	m_bRepair = true;
	g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
	if(ONE_VALVE==ProductParam.valveSelect)
	{
		OneValveRepaire(bIsDispense);
	}
	else if(TWO_VALVE==ProductParam.valveSelect)
	{
		TwoValveRepaire(bIsDispense);
	}
	else
	{
		ThreeValveRepaire(bIsDispense);
	}
	m_bRepair = false;
	for(int i=0;i<3;i++)
	{
		ProductParam.FSelectVal[i] = bSelect[i];
	}
	MoveToZSafety();
	m_tStatus = K_RUN_STS_STOP;
	Sleep(50);
	if(!SetAxisProfile(MEDIUM_VEL))
	{
		return;
	}
}

bool CCmdRun::SelectDispense(double x,double y,double z)
{
	if(!m_pMv->WarnCheckPos(&x,&y,&z,NULL))
	{
		AddMsg("Exceed Motor Limit!");
		return false;
	}
	if(ProductParam.DispFCount==0)
	{
		return true;
	}
	double r = ProductParam.dDispRadius;
	double distance = ProductParam.dDistance;
	double length = ProductParam.LineLength;
	double dRectLength = ProductParam.RectLength;
	double dRectWidth = ProductParam.RectWidth;
	if(ProductParam.fillMode==HELIX_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,r,distance,true))
		{
			return false;
		}
	}
	else if(ProductParam.fillMode == LINE_HORIZONTAL_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,length,false,true))
		{
			return false;
		}
	}
	else if(ProductParam.fillMode == LINE_VERTICAL_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,length,true,true))
		{
			return false;
		}
	}
	else if(ProductParam.fillMode == RECTANGLE_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,dRectLength,dRectWidth,true,true))
		{
			return false;
		}
	}
	else if(ProductParam.fillMode == CUSTOM_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,g_pFrm->m_rawList,true))
		{
			return false;
		}
	}
	else if(ProductParam.fillMode == CIRCLE_DISP_MODE)
	{
		if(!RunSingleDot(x,y,z,r,true))
		{
			return false;
		}
	}
	else
	{
		if(!RunSingleDot(x,y,z,true))
		{
			return false;
		}
	}
	DisCompCount++;
	return true;
}

double CCmdRun::CalculateAngle(double dX,double dY)
{
	double dAngle = 0.0;
	double dis = sqrt(dX*dX+dY*dY);
	if(fabs(dis)<0.01)
	{
		dAngle = 0.0;
	}
	else
	{
		dAngle = acos((double)dX/dis);
		if(dY<0)
		{
			dAngle = -dAngle;
		}
	}
	return dAngle/KGB_PI*180;
}

void CCmdRun::Rotation(double vx,double vy,double dAngle,double &dx,double &dy)
{
	double dsin = sin(dAngle/180*KGB_PI);
	double dcos = cos(dAngle/180*KGB_PI);
	dx = vx*dcos - vy*dsin;
	dy = vx*dsin + vy*dcos;
}

bool CCmdRun::SynchronizeMoveZ(double z,double vel,double acc,bool bWaitStop)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	CString str;
	//str.Format("za = %0.3f,zb = %0.3f,zc = %0.3f",za,zb,zc);
	//AddMsg(str);
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	MOTION_STATUS status;
	status = m_pMv->SetProfile(K_AXIS_Z,vel,acc);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	if(!IsZCommandAt(z))
	{
		status = m_pMv->Move(K_AXIS_Z,z,false,true);
		if(MOT_STATUS_OK!=status)
		{
			return false;
		}
	}
	if(bWaitStop)
	{
		if(!WaitStopZ(10000))
		{
			return false;
		}
		if(!IsZCommandAt(z))
		{
			return false;
		}
	}
	return true;
}

bool CCmdRun::SynchronizeMoveZ(double z,bool bWaitStop)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	CString str;
	//str.Format("za = %0.3f,zb = %0.3f,zc = %0.3f",za,zb,zc);
	//AddMsg(str);
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	MOTION_STATUS status;
	if(!IsZCommandAt(z))
	{
		status = m_pMv->Move(K_AXIS_Z,z,false,true);
		if(MOT_STATUS_OK!=status)
		{
			return false;
		}
	}
	if(bWaitStop)
	{
		if(!WaitStopZ(10000))
		{
			return false;
		}
		if(!IsZCommandAt(z))
		{
			return false;
		}
	}
	return true;
}

bool CCmdRun::WaitStopZ(unsigned long lTimeout)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	MOTION_STATUS status;
	status = m_pMv->WaitStop(K_AXIS_Z,lTimeout);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	return true;
}

bool CCmdRun::IsZCommandAt(double dPosZ)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	return fabs(m_pMv->GetPos(K_AXIS_Z)-dPosZ)<0.01;
}

bool CCmdRun::SynchronizeMoveXY(double x,double y,double vel,double acc,bool bWaitStop)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	MOTION_STATUS status;
	status = m_pMv->SetProfile(K_AXIS_X,vel,acc);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	status = m_pMv->SetProfile(K_AXIS_Y,vel,acc);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	if(!IsXCommandAt(x))
	{
		status = m_pMv->Move(K_AXIS_X,x,false,true);
		if(MOT_STATUS_OK!=status)
		{
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			return false;
		}
	}
	if(!IsYCommandAt(y))
	{
		status = m_pMv->Move(K_AXIS_Y,y,false,true);
		if(MOT_STATUS_OK!=status)
		{
			return false;
		}
	}
	if(bWaitStop)
	{
		if(!WaitStopXY(10000))
		{
			return false;
		}
		if((!IsXCommandAt(x))||(!IsYCommandAt(y)))
		{
			return false;
		}
	}
	return true;
}

bool CCmdRun::SynchronizeMoveXY(double x,double y,bool bWaitStop)
{
	CString strText;
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		strText.Format("status = %d,RunError = %d",int(m_tStatus),int(RunErrorID));
		AddMsg(strText);
		return false;
	}
	MOTION_STATUS status;
	if(!IsXCommandAt(x))
	{
		status = m_pMv->Move(K_AXIS_X,x,false,true);
		if(MOT_STATUS_OK!=status)
		{
			strText.Format("move status = %d",int(status));
			AddMsg(strText);
			return false;
		}
		if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
		{
			strText.Format("status = %d,RunError = %d",int(m_tStatus),int(RunErrorID));
			AddMsg(strText);
			return false;
		}
	}
	if(!IsYCommandAt(y))
	{
		status = m_pMv->Move(K_AXIS_Y,y,false,true);
		if(MOT_STATUS_OK!=status)
		{
			strText.Format("move status = %d",int(status));
			AddMsg(strText);
			return false;
		}
	}
	if(bWaitStop)
	{
		if(!WaitStopXY(10000))
		{
			AddMsg("WaitStopXY Failed!");
			return false;
		}
		if((!IsXCommandAt(x))||(!IsYCommandAt(y)))
		{
			strText.Format("PosX = %0.3f,PosY = %0.3f,CurrentPosX = %0.3f,CurrentPosY = %0.3f",x,y,m_pMv->GetPos(K_AXIS_X),m_pMv->GetPos(K_AXIS_Y));
			AddMsg(strText);
			return false;
		}
	}
	return true;
}

bool CCmdRun::WaitStopXY(unsigned long lTimeout)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	MOTION_STATUS status;
	status = m_pMv->WaitStop(K_AXIS_X,lTimeout);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	status = m_pMv->WaitStop(K_AXIS_Y,lTimeout);
	if(MOT_STATUS_OK!=status)
	{
		return false;
	}
	return true;
}

bool CCmdRun::IsXCommandAt(double dPosX)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	return fabs(m_pMv->GetPos(K_AXIS_X)-dPosX)<0.01;
}

bool CCmdRun::IsYCommandAt(double dPosY)
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	return fabs(m_pMv->GetPos(K_AXIS_Y)-dPosY)<0.01;
}

tgPos CCmdRun::GetPadDispensePos(int nFirstRow,int nFirstColumn,int nSecondRow,int nSecondColumn,int nThirdRow,int nThirdColumn)
{
	tgPos tgDispensePos;
	tgDispensePos.x = ProductParam.DispenseStartPos[0] + nFirstColumn*ProductParam.FirstDispColumnD + nSecondColumn*ProductParam.SecondDispColumnD + nThirdColumn*ProductParam.ThirdDispColumnD;
	tgDispensePos.y = ProductParam.DispenseStartPos[1] + nFirstRow*ProductParam.FirstDispRowD + nSecondRow*ProductParam.SecondDispRowD + nThirdRow*ProductParam.ThirdDispRowD;
	tgDispensePos.z = ProductParam.DispenseStartPos[2];
	return tgDispensePos;
}

tgPos CCmdRun::GetPadCameraPos(int nFirstRow,int nFirstColumn,int nSecondRow,int nSecondColumn,int nThirdRow,int nThirdColumn)
{
	tgPos tgCameraPos;
	tgCameraPos = GetPadDispensePos(nFirstRow,nFirstColumn,nSecondRow,nSecondColumn,nThirdRow,nThirdColumn);
	tgCameraPos.x += ProductParam.BmpCalibrationPosition[0];
	tgCameraPos.y += ProductParam.BmpCalibrationPosition[1];
	tgCameraPos.z = ProductParam.tgImagePos[0].z;
	//tgPos tgCameraPos;
	//tgCameraPos.x = ProductParam.StartImagePos[0] + nFirstColumn*ProductParam.FirstDispColumnD + nSecondColumn*ProductParam.SecondDispColumnD + nThirdColumn*ProductParam.ThirdDispColumnD;
	//tgCameraPos.y = ProductParam.StartImagePos[1] + nFirstRow*ProductParam.FirstDispRowD + nSecondRow*ProductParam.SecondDispRowD + nThirdRow*ProductParam.ThirdDispRowD;
	//tgCameraPos.z = ProductParam.StartImagePos[2];
	return tgCameraPos;
}

tgPos CCmdRun::GetPadDispensePos(int nIrregularRow,int nIrregularColumn)
{
	tgPos tgDispensePos;
	tgDispensePos.x = ProductParam.DispenseStartPos[0];
	tgDispensePos.y = ProductParam.DispenseStartPos[1];
	tgDispensePos.z = ProductParam.DispenseStartPos[2];
	for(int i=0;i<nIrregularRow;i++)
	{
		tgDispensePos.y += ProductParam.IrregularRowD[i];
	}
	for(int i=0;i<nIrregularColumn;i++)
	{
		tgDispensePos.x += ProductParam.IrregularColumnD[i];
	}
	return tgDispensePos;
}

tgPos CCmdRun::GetPadCameraPos(int nIrregularRow,int nIrregularColumn)
{
	//tgPos tgCameraPos;
	//tgCameraPos.x = ProductParam.StartImagePos[0];
	//tgCameraPos.y = ProductParam.StartImagePos[1];
	//tgCameraPos.z = ProductParam.StartImagePos[2];
	//for(int i=0;i<nIrregularRow;i++)
	//{
	//	tgCameraPos.y += ProductParam.IrregularRowD[i];
	//}
	//for(int i=0;i<nIrregularColumn;i++)
	//{
	//	tgCameraPos.x += ProductParam.IrregularColumnD[i];
	//}
	tgPos tgCameraPos;
	tgCameraPos = GetPadDispensePos(nIrregularRow,nIrregularColumn);
	tgCameraPos.x += ProductParam.BmpCalibrationPosition[0];
	tgCameraPos.y += ProductParam.BmpCalibrationPosition[1];
	tgCameraPos.z = ProductParam.tgImagePos[0].z;
	return tgCameraPos;
}

bool CCmdRun::ScanInspect()
{
	CString strFile;
	int nTempCount = 0;
	if(m_pPadDetect==NULL)
	{
		m_pPadDetect = new bool[m_nPadNumber];
	}
	memset(m_pPadDetect,1,m_nPadNumber*sizeof(bool));
	if(!MoveToZSafety())
	{
		return false;
	}
	if(IsExitRun())
	{
		return false;
	}
	tgPos tgScanPos = GetFirstCameraPos();
	if(!SynchronizeMoveXY(tgScanPos.x,tgScanPos.y,true))
	{
		return false;
	}
	if(!SynchronizeMoveZ(tgScanPos.z,true))
	{
		return false;
	}
	strFile = g_pDoc->GetModeFile(0);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[0]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	if(ProductParam.IrregularMatrix)
	{
		for(int i=0;i<ProductParam.IrregularRow;i++)
		{
			if(!(i%2))
			{
				for(int j=0;j<ProductParam.IrregularColumn;j++)
				{
					tgScanPos = GetPadCameraPos(i,j);
					if(fabs(m_pMv->GetPos(K_AXIS_X)-tgScanPos.x)>0.01||fabs(m_pMv->GetPos(K_AXIS_Y)-tgScanPos.y)>0.01)
					{
						if(!SynchronizeMoveXY(tgScanPos.x,tgScanPos.y,true))
						{
							return false;
						}
					}
					if(fabs(m_pMv->GetPos(K_AXIS_Z)-tgScanPos.z)>0.01)
					{
						if(!SynchronizeMoveZ(tgScanPos.z,true))
						{
							return false;
						}
					}
					Sleep(ProductParam.ScanDelay*1000);
					if(!g_pView->m_ImgStatic.CopyImage(RGB8))
					{
						return false;
					}
					if(!milApp.FindModel())
					{
						m_pPadDetect[j+i*ProductParam.IrregularColumn] = false;
					}
					else
					{
						m_pPadDetect[j+i*ProductParam.IrregularColumn] = true;
					}
					if(IsExitRun())
					{
						return false;
					}
				}
			}
			else
			{
				for(int j=ProductParam.IrregularColumn-1;j>=0;j--)
				{
					tgScanPos = GetPadCameraPos(i,j);
					if(fabs(m_pMv->GetPos(K_AXIS_X)-tgScanPos.x)>0.01||fabs(m_pMv->GetPos(K_AXIS_Y)-tgScanPos.y)>0.01)
					{
						if(!SynchronizeMoveXY(tgScanPos.x,tgScanPos.y,true))
						{
							return false;
						}
					}
					if(fabs(m_pMv->GetPos(K_AXIS_Z)-tgScanPos.z)>0.01)
					{
						if(!SynchronizeMoveZ(tgScanPos.z,true))
						{
							return false;
						}
					}
					Sleep(ProductParam.ScanDelay*1000);
					if(!g_pView->m_ImgStatic.CopyImage(RGB8))
					{
						return false;
					}
					if(!milApp.FindModel())
					{
						m_pPadDetect[j+i*ProductParam.IrregularColumn] = false;
					}
					else
					{
						m_pPadDetect[j+i*ProductParam.IrregularColumn] = true;
					}
					if(IsExitRun())
					{
						return false;
					}
				}
			}
		}
	}
	else
	{
		int secondNum = ProductParam.SecondDispRow*ProductParam.SecondDispColumn;
		int thirdNum = ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
		for(int i=0;i<ProductParam.FirstDispRow;i++)
		{
			for(int m=0;m<ProductParam.SecondDispRow;m++)
			{
				for(int k=0;k<ProductParam.ThirdDispRow;k++)
				{
					if(!((i*ProductParam.ThirdDispRow*ProductParam.SecondDispRow+m*ProductParam.ThirdDispRow+k)%2))
					{
						for(int j=0;j<ProductParam.FirstDispColumn;j++)
						{
							for(int n=0;n<ProductParam.SecondDispColumn;n++)
							{
								for(int l=0;l<ProductParam.ThirdDispColumn;l++)
								{
									nTempCount = l+k*ProductParam.ThirdDispColumn+n*thirdNum+m*ProductParam.SecondDispColumn*thirdNum+
										j*secondNum*thirdNum+i*ProductParam.FirstDispColumn*secondNum*thirdNum;
									tgScanPos = GetPadCameraPos(i,j,m,n,k,l);
									if(fabs(m_pMv->GetPos(K_AXIS_X)-tgScanPos.x)>0.01||fabs(m_pMv->GetPos(K_AXIS_Y)-tgScanPos.y)>0.01)
									{
										if(!SynchronizeMoveXY(tgScanPos.x,tgScanPos.y,true))
										{
											return false;
										}
									}
									if(fabs(m_pMv->GetPos(K_AXIS_Z)-tgScanPos.z)>0.01)
									{
										if(!SynchronizeMoveZ(tgScanPos.z,true))
										{
											return false;
										}
									}
									Sleep(ProductParam.ScanDelay*1000);
									if(!g_pView->m_ImgStatic.CopyImage(RGB8))
									{
										return false;
									}
									if(!milApp.FindModel())
									{
										m_pPadDetect[nTempCount] = false;
									}
									else
									{
										m_pPadDetect[nTempCount] = true;
									}
									if(IsExitRun())
									{
										return false;
									}
								}
							}
						}
					}
					else
					{
						for(int j=ProductParam.FirstDispColumn-1;j>=0;j--)
						{
							for(int n=ProductParam.SecondDispColumn-1;n>=0;n--)
							{
								for(int l=ProductParam.ThirdDispColumn-1;l>=0;l--)
								{
									nTempCount = l+k*ProductParam.ThirdDispColumn+n*thirdNum+m*ProductParam.SecondDispColumn*thirdNum+
										j*secondNum*thirdNum+i*ProductParam.FirstDispColumn*secondNum*thirdNum;
									tgScanPos = GetPadCameraPos(i,j,m,n,k,l);
									if(fabs(m_pMv->GetPos(K_AXIS_X)-tgScanPos.x)>0.01||fabs(m_pMv->GetPos(K_AXIS_Y)-tgScanPos.y)>0.01)
									{
										if(!SynchronizeMoveXY(tgScanPos.x,tgScanPos.y,true))
										{
											return false;
										}
									}
									if(fabs(m_pMv->GetPos(K_AXIS_Z)-tgScanPos.z)>0.01)
									{
										if(!SynchronizeMoveZ(tgScanPos.z,true))
										{
											return false;
										}
									}
									Sleep(ProductParam.ScanDelay*1000);
									if(!g_pView->m_ImgStatic.CopyImage(RGB8))
									{
										return false;
									}
									if(!milApp.FindModel())
									{
										m_pPadDetect[nTempCount] = false;
									}
									else
									{
										m_pPadDetect[nTempCount] = true;
									}
									if(IsExitRun())
									{
										return false;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return true;
}

void CCmdRun::PadDetect()
{
	while(m_bImageUse)
	{
		CTimeUtil::Delay(10);
	}
	m_bImageUse = true;
	CString str;
	str.Format("开始Pad检测");
	m_pLog->log(str);
	memset(m_pTransitionDetect,1,m_nPadNumber*sizeof(bool));
	if(TRANSITION_INSPECT == ProductParam.inspectMode)
	{
		str.Format("start SpliceInspect");
		m_pLog->log(str);
		SpliceInspect(false);
	}
	m_bImageUse = false;
	m_pMv->SetOutput(theApp.m_tSysParam.outDetectFinish,TRUE);
	CTimeUtil::Delay(500);
	m_pMv->SetOutput(theApp.m_tSysParam.outDetectFinish,FALSE);
	//AddMsg("Pad检测完成！");
	str.Format("Pad检测完成，上料信号发送完成");
	AddMsg(str);
	m_pLog->log(str);
}

tgPos CCmdRun::GetFirstCameraPos()
{
	tgPos tgFirstPos;
	if(ProductParam.IrregularMatrix)
	{
		tgFirstPos = GetPadCameraPos(0,0);
	}
	else
	{
		tgFirstPos = GetPadCameraPos(0,0,0,0,0,0);
	}
	return tgFirstPos;
}

tgPos CCmdRun::GetLastCameraPos()
{
	tgPos tgLastPos;
	if(ONE_VALVE==ProductParam.valveSelect)
	{
		if(ProductParam.IrregularMatrix)
		{
			tgLastPos = GetPadCameraPos(ProductParam.IrregularRow-1,ProductParam.IrregularColumn-1);
		}
		else
		{
			tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
		}
	}
	else if(TWO_VALVE==ProductParam.valveSelect)
	{
		if(ProductParam.IrregularMatrix)
		{
			tgLastPos = GetPadCameraPos(ProductParam.IrregularRow-1,(ProductParam.IrregularColumn-1)/2);
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,(ProductParam.FirstDispColumn-1)/2,ProductParam.SecondDispRow-1,ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,(ProductParam.SecondDispColumn-1)/2,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
			}
			else
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,(ProductParam.ThirdDispColumn-1)/2);
			}
		}
	}
	else
	{
		if(ProductParam.IrregularMatrix)
		{
			tgLastPos = GetPadCameraPos(ProductParam.IrregularRow-1,(ProductParam.IrregularColumn-1)/3);
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,(ProductParam.FirstDispColumn-1)/3,ProductParam.SecondDispRow-1,ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,(ProductParam.SecondDispColumn-1)/3,ProductParam.ThirdDispRow-1,ProductParam.ThirdDispColumn-1);
			}
			else
			{
				tgLastPos = GetPadCameraPos(ProductParam.FirstDispRow-1,ProductParam.FirstDispColumn-1,ProductParam.SecondDispRow-1,ProductParam.SecondDispColumn-1,ProductParam.ThirdDispRow-1,(ProductParam.ThirdDispColumn-1)/3);
			}
		}
	}
	return tgLastPos;
}

bool CCmdRun::MoveToCenter()
{
	tgPos tgCurrentPos;
	tgCurrentPos.x = m_pMv->GetPos(K_AXIS_X);
	tgCurrentPos.y = m_pMv->GetPos(K_AXIS_Y);
	if(!g_pView->m_ImgStatic.CopyImage(RGB8))
	{
		return false;
	}
	CString strFile = g_pDoc->GetModeFile(0);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[0]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	if(!milApp.FindModel())
	{
		return false;
	}
	double dX,dY;
	theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(milApp.m_stResult.dResultCenterX[0]-(milApp.m_lBufSizeX-1)/2,
		milApp.m_stResult.dResultCenterY[0]-(milApp.m_lBufSizeY-1)/2,dX,dY);
	tgCurrentPos.x -= dX;
	tgCurrentPos.y -= dY;

	if(!g_pFrm->m_CmdRun.SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
	{
		return false;
	}
	return true;
}

BOOL CCmdRun::CheckHeightEx()
{
	double dHeight = 0.0;
	long lStatus;
	BOOL bHeightSensor = FALSE;
	if(theApp.m_tSysParam.sensorType==ContactSensorClose)
	{
		bHeightSensor = TRUE; 
	}
	else if(theApp.m_tSysParam.sensorType==ContactSensorOpen)
	{
		bHeightSensor = FALSE;
	}
	if(!MoveToZSafety())
	{
		return FALSE;
	}
	if(!SynchronizeMoveXY(ProductParam.ContactSensorPos[0],ProductParam.ContactSensorPos[1],ProductParam.FreeVal,ProductParam.FreeAcc,true))
	{
		return FALSE;
	}
	dHeight = (g_pFrm->m_CmdRun.ProductParam.ContactSensorPos[2]-10)<70?(g_pFrm->m_CmdRun.ProductParam.ContactSensorPos[2]-10):70;
	if(!SynchronizeMoveZ(dHeight,50,1000,false))
	{
		return FALSE;
	}
	theApp.m_Mv400.GetAxisSts(K_AXIS_Z,&lStatus);
	while(lStatus&0x400)
	{
		if(theApp.m_Mv400.GetInput(theApp.m_tSysParam.inHeight)==bHeightSensor)
		{
			theApp.m_Mv400.Stop(K_AXIS_Z);
			break;
		}
		theApp.m_Mv400.GetAxisSts(K_AXIS_Z,&lStatus);
	}
	Sleep(100);
	if(!SynchronizeMoveZ(theApp.m_tSysParam.tAxis[K_AXIS_Z-1].maxpos,g_pFrm->m_CmdRun.ProductParam.ContactMeasureVel,g_pFrm->m_CmdRun.ProductParam.ContactMeasureAcc,false))
	{
		return FALSE;
	}
	BOOL bMeasureSucceed = FALSE;
	theApp.m_Mv400.GetAxisSts(K_AXIS_Z,&lStatus);
	while(lStatus&0x400)
	{
		if(theApp.m_Mv400.GetInput(theApp.m_tSysParam.inHeight)==bHeightSensor)
		{
			theApp.m_Mv400.Stop(K_AXIS_Z);
			break;
		}
		theApp.m_Mv400.GetAxisSts(K_AXIS_Z,&lStatus);
	}
	if(theApp.m_Mv400.GetInput(theApp.m_tSysParam.inHeight)==(!bHeightSensor))
	{
		return bMeasureSucceed;
	}
	//反向脱离
	double dPos = theApp.m_Mv400.GetPos(K_AXIS_Z);
	if(!SynchronizeMoveZ(dPos-1.0,g_pFrm->m_CmdRun.ProductParam.ContactMeasureVel,g_pFrm->m_CmdRun.ProductParam.ContactMeasureAcc,true))
	{
		return FALSE;
	}
	Sleep(100);
	if(!SynchronizeMoveZ(theApp.m_tSysParam.tAxis[K_AXIS_Z-1].maxpos,g_pFrm->m_CmdRun.ProductParam.ContactMeasureVel/5,g_pFrm->m_CmdRun.ProductParam.ContactMeasureAcc/2,false))
	{
		return FALSE;
	}
	//检测电平
	while(lStatus&0x400)
	{
		if(theApp.m_Mv400.GetInput(theApp.m_tSysParam.inHeight)==bHeightSensor)
		{
			theApp.m_Mv400.Stop(K_AXIS_Z);
			g_pFrm->m_CmdRun.ProductParam.ContactSensorPos[K_AXIS_Z-1] = theApp.m_Mv400.GetPos(K_AXIS_Z);
			bMeasureSucceed = TRUE;
			break;
		}
		theApp.m_Mv400.GetAxisSts(K_AXIS_Z,&lStatus);
	}
	if(!SetAxisProfile(MEDIUM_VEL))
	{
		return FALSE;
	}
	if(!MoveToZSafety())
	{
		return FALSE;
	}
	return bMeasureSucceed;
}

bool CCmdRun::SetAxisProfile(VelType type)
{
	CString str;
	MOTION_STATUS status;
	int nVelType = int(type);
	status = m_pMv->SetProfile(K_AXIS_X,theApp.m_tSysParam.tAxis[K_AXIS_X-1].vel[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_X-1].acc[nVelType],
		theApp.m_tSysParam.tAxis[K_AXIS_X-1].dec[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_X-1].jerk[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_X-1].velStart[nVelType]);
	if(MOT_STATUS_OK!=status)
	{
		str.Format("X轴设置参数失败！");
		AddMsg(str);
		m_pLog->log(str);
		return false;
	}
	status = m_pMv->SetProfile(K_AXIS_Y,theApp.m_tSysParam.tAxis[K_AXIS_Y-1].vel[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Y-1].acc[nVelType],
		theApp.m_tSysParam.tAxis[K_AXIS_Y-1].acc[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Y-1].jerk[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Y-1].velStart[nVelType]);
	if(MOT_STATUS_OK!=status)
	{
		str.Format("Y轴设置参数失败！");
		AddMsg(str);
		m_pLog->log(str);
		return false;
	}
	status = m_pMv->SetProfile(K_AXIS_Z,theApp.m_tSysParam.tAxis[K_AXIS_Z-1].vel[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Z-1].acc[nVelType],
		theApp.m_tSysParam.tAxis[K_AXIS_Z-1].acc[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Z-1].jerk[nVelType],theApp.m_tSysParam.tAxis[K_AXIS_Z-1].velStart[nVelType]);
	if(MOT_STATUS_OK!=status)
	{
		str.Format("Z轴设置参数失败！");
		AddMsg(str);
		m_pLog->log(str);
		return false;
	}
	return true;
}

bool CCmdRun::MoveToZSafety()
{
	if(!m_pMv->IsInitOK())
	{
		return false;
	}
	if(m_tStatus ==K_RUN_STS_EMERGENCY||RunErrorID>=0)
	{
		return false;
	}
	if(!SynchronizeMoveZ(5,true))
	{
		return false;
	}
	return true;
}

void CCmdRun::TestImage()
{
	CString str;
	tgPos tgStartImage,tgEndImage,tgImageCenter,tgAlignCenter,tgCurrentPos,tgOffset;
	double dX = 0.0,dY = 0.0,dAngle = 0.0;
	m_tOffset.x = 0.0;
	m_tOffset.y = 0.0;
	m_tOffset.z = 0.0;
	m_dRotateAngle = 0.0;
	m_tStatus = K_RUN_STS_RUN;
	if(!FindTwoMark())
	{
		m_tOffset.x = 0.0;
		m_tOffset.y = 0.0;
		m_dRotateAngle = 0.0;
		AddMsg("没有找到图像");
		m_bIsSupend = true;
		if(AfxMessageBox("图像查找失败！是否继续？",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			return;
		}
		m_bIsSupend = false;
	}
	if(fabs(m_dRotateAngle)>ProductParam.MaxOffsetAngle)
	{
		m_bIsSupend = true;
		if(AfxMessageBox("偏移角度超过允许的角度，是否继续运行？",MB_YESNO)!=IDYES)
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
			m_bIsSupend = false;
			return;
		}
		m_bIsSupend = false;
	}
	if(fabs(m_tOffset.x)>2||fabs(m_tOffset.y)>2)
	{
		m_bIsSupend = true;
		if(AfxMessageBox("位置偏移超过2mm，是否继续运行？",MB_YESNO)!=IDYES)
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
			m_bIsSupend = false;
			return;
		}
		if(AfxMessageBox("是否调整位置偏移？",MB_YESNO)!=IDYES)
		{
			m_tOffset.x = 0.0;
			m_tOffset.y = 0.0;
			m_dRotateAngle = 0.0;
		}
		m_bIsSupend = false;
	}
	Sleep(1000);
	tgOffset.x = m_tOffset.x;
	tgOffset.y = m_tOffset.y;
	dAngle = m_dRotateAngle;
	tgStartImage = GetFirstCameraPos();
	tgEndImage = GetLastCameraPos();
	tgImageCenter.x = (tgStartImage.x+tgEndImage.x)/2;
	tgImageCenter.y = (tgStartImage.y+tgEndImage.y)/2;
	tgImageCenter.z = tgStartImage.z;
	tgAlignCenter.x = tgImageCenter.x - tgOffset.x;
	tgAlignCenter.y = tgImageCenter.y - tgOffset.y;
	tgAlignCenter.z = tgImageCenter.z;

	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int i=0;i<(ProductParam.IrregularColumn+2)/3;i++)
			{
				if(!(i%2))
				{
					for(int j=0;j<ProductParam.IrregularRow;j++)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(j,i);
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
				else
				{
					for(int j=ProductParam.IrregularRow-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(j,i);
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.IrregularRow;i++)
			{
				if(!(i%2))
				{
					for(int j=0;j<(ProductParam.IrregularColumn+2)/3;j++)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(i,j);
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
				else
				{
					for(int j=(ProductParam.IrregularColumn-1)/3;j>=0;j--)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(i,j);
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<(ProductParam.FirstDispColumn+2)/3;i++)
				{
					for(int m=0;m<ProductParam.SecondDispColumn;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispColumn;i++)
				{
					for(int m=0;m<(ProductParam.SecondDispColumn+2)/3;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispColumn;i++)
				{
					for(int m=0;m<ProductParam.SecondDispColumn;m++)
					{
						for(int k=0;k<(ProductParam.ThirdDispColumn+2)/3;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<(ProductParam.FirstDispColumn+2)/3;j++)
								{
									for(int n=0;n<ProductParam.SecondDispColumn;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispColumn;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=(ProductParam.FirstDispColumn-1)/3;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispColumn-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispColumn-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispColumn;j++)
								{
									for(int n=0;n<(ProductParam.SecondDispColumn+2)/3;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispColumn;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispColumn-1;j>=0;j--)
								{
									for(int n=(ProductParam.SecondDispColumn-1)/3;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispColumn-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispColumn;j++)
								{
									for(int n=0;n<ProductParam.SecondDispColumn;n++)
									{
										for(int l=0;l<(ProductParam.ThirdDispColumn+2)/3;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispColumn-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispColumn-1;n>=0;n--)
									{
										for(int l=(ProductParam.ThirdDispColumn-1)/3;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	m_tStatus = K_RUN_STS_STOP;
}

bool CCmdRun::RailMotor(bool bRun,bool bPositive)
{
	CString str;
	if(bRun)
	{
		if(!m_pMv->IsMove(K_AXIS_O))
		{
			str.Format("轨道运行：vel=%0.3f,acc=%0.3f,Positive=%d",theApp.m_tSysParam.tAxis[K_AXIS_O-1].vel[2],theApp.m_tSysParam.tAxis[K_AXIS_O-1].acc[2],bPositive);
			AddMsg(str);
			m_pMv->ContinuousMove(K_AXIS_O,theApp.m_tSysParam.tAxis[K_AXIS_O-1].vel[2],theApp.m_tSysParam.tAxis[K_AXIS_O-1].acc[2],bPositive);
		}
	}
	else
	{
		if(m_pMv->IsMove(K_AXIS_O))
		{
			m_pMv->Stop(K_AXIS_O);
			AddMsg("轨道运行停止");
		}
	}
	return TRUE;
}

bool CCmdRun::CleanAndTest(bool bFill)
{
	if(bFill)
	{
		if(ProductParam.dispSequence == CLEAN_LATER_TEST)
		{
			if(ProductParam.FullClean)
			{
				if(!CleanNeedle(true))
				{
					return false;
				}
			}
			if(ProductParam.FullTestDot)
			{
				if(!TestDispense())
				{
					return false;
				}
			}
		}
		else if(ProductParam.dispSequence == TEST_LATER_CLEAN)
		{
			if(ProductParam.FullTestDot)
			{
				if(!TestDispense())
				{
					return false;
				}
			}
			if(ProductParam.FullClean)
			{
				if(!CleanNeedle(true))
				{
					return false;
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispSequence == CLEAN_LATER_TEST)
		{
			if(ProductParam.CleanNd)
			{
				if(!CleanNeedle(true))
				{
					return false;
				}
			}
			if(ProductParam.FirstTest)
			{
				if(!TestDispense())
				{
					return false;
				}
			}
		}
		else if(ProductParam.dispSequence == TEST_LATER_CLEAN)
		{
			if(ProductParam.FirstTest)
			{
				if(!TestDispense())
				{
					return false;
				}
			}
			if(ProductParam.CleanNd)
			{
				if(!CleanNeedle(true))
				{
					return false;
				}
			}
		}
	}
	return true;
}

void CCmdRun::TestImageTwo()
{
	CString str;
	tgPos tgStartImage,tgEndImage,tgImageCenter,tgAlignCenter,tgCurrentPos,tgOffset;
	double dX = 0.0,dY = 0.0,dAngle = 0.0;
	m_tOffset.x = 0.0;
	m_tOffset.y = 0.0;
	m_tOffset.z = 0.0;
	m_dRotateAngle = 0.0;
	m_tStatus = K_RUN_STS_RUN;
	if(!FindImageOffset(m_tOffset.x,m_tOffset.y,m_dRotateAngle,false))
	{
		m_tOffset.x = 0.0;
		m_tOffset.y = 0.0;
		m_dRotateAngle = 0.0;
		AddMsg("没有找到图像");
		m_bIsSupend = true;
		if(AfxMessageBox("图像查找失败！是否继续？",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			return;
		}
		m_bIsSupend = false;
	}
	Sleep(1000);
	tgOffset.x = m_tOffset.x;
	tgOffset.y = m_tOffset.y;
	dAngle = m_dRotateAngle;
	tgStartImage = GetFirstCameraPos();
	tgStartImage.z = ProductParam.tgImagePos[0].z;
	tgEndImage = GetLastCameraPos();
	tgEndImage.z = ProductParam.tgImagePos[01].z;
	tgImageCenter.x = (tgStartImage.x+tgEndImage.x)/2;
	tgImageCenter.y = (tgStartImage.y+tgEndImage.y)/2;
	tgImageCenter.z = ProductParam.tgImagePos[0].z;
	tgAlignCenter.x = tgImageCenter.x - tgOffset.x;
	tgAlignCenter.y = tgImageCenter.y - tgOffset.y;
	tgAlignCenter.z = ProductParam.tgImagePos[0].z;

	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int i=0;i<(ProductParam.IrregularColumn+2)/3;i++)
			{
				if(!(i%2))
				{
					for(int j=0;j<ProductParam.IrregularRow;j++)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(j,i);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
				else
				{
					for(int j=ProductParam.IrregularRow-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(j,i);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.IrregularRow;i++)
			{
				if(!(i%2))
				{
					for(int j=0;j<(ProductParam.IrregularColumn+2)/3;j++)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(i,j);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
				else
				{
					for(int j=(ProductParam.IrregularColumn-1)/3;j>=0;j--)
					{
						if(IsExitRun())
						{
							return;
						}
						tgCurrentPos = GetPadCameraPos(i,j);
						tgCurrentPos.x += ProductParam.DispOffsetX;
						tgCurrentPos.y += ProductParam.DispOffsetY;
						dX = tgCurrentPos.x - tgImageCenter.x;
						dY = tgCurrentPos.y - tgImageCenter.y;
						str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
						AddMsg(str);
						Rotation(dX,dY,-dAngle,dX,dY);
						tgCurrentPos.x = tgAlignCenter.x + dX;
						tgCurrentPos.y = tgAlignCenter.y + dY;
						str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
							tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
						AddMsg(str);
						if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
						{
							return;
						}
						if(!SynchronizeMoveZ(tgCurrentPos.z,true))
						{
							return;
						}
						Sleep(1000);
					}
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<(ProductParam.FirstDispColumn+2)/3;i++)
				{
					for(int m=0;m<ProductParam.SecondDispColumn;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispColumn;i++)
				{
					for(int m=0;m<(ProductParam.SecondDispColumn+2)/3;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispColumn;i++)
				{
					for(int m=0;m<ProductParam.SecondDispColumn;m++)
					{
						for(int k=0;k<(ProductParam.ThirdDispColumn+2)/3;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+m*ProductParam.ThirdDispColumn+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispRow;j++)
								{
									for(int n=0;n<ProductParam.SecondDispRow;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispRow;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispRow-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispRow-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispRow-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(j,i,n,m,l,k);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<(ProductParam.FirstDispColumn+2)/3;j++)
								{
									for(int n=0;n<ProductParam.SecondDispColumn;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispColumn;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=(ProductParam.FirstDispColumn-1)/3;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispColumn-1;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispColumn-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispColumn;j++)
								{
									for(int n=0;n<(ProductParam.SecondDispColumn+2)/3;n++)
									{
										for(int l=0;l<ProductParam.ThirdDispColumn;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispColumn-1;j>=0;j--)
								{
									for(int n=(ProductParam.SecondDispColumn-1)/3;n>=0;n--)
									{
										for(int l=ProductParam.ThirdDispColumn-1;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							if(!((i*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+m*ProductParam.ThirdDispRow+k)%2))
							{
								for(int j=0;j<ProductParam.FirstDispColumn;j++)
								{
									for(int n=0;n<ProductParam.SecondDispColumn;n++)
									{
										for(int l=0;l<(ProductParam.ThirdDispColumn+2)/3;l++)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
							else
							{
								for(int j=ProductParam.FirstDispColumn-1;j>=0;j--)
								{
									for(int n=ProductParam.SecondDispColumn-1;n>=0;n--)
									{
										for(int l=(ProductParam.ThirdDispColumn-1)/3;l>=0;l--)
										{
											if(IsExitRun())
											{
												return;
											}
											tgCurrentPos = GetPadCameraPos(i,j,m,n,k,l);
											tgCurrentPos.x += ProductParam.DispOffsetX;
											tgCurrentPos.y += ProductParam.DispOffsetY;
											dX = tgCurrentPos.x - tgImageCenter.x;
											dY = tgCurrentPos.y - tgImageCenter.y;
											str.Format("tgCurrentPos(%0.3f,%0.3f),Offset(%0.3f,%0.3f)",tgCurrentPos.x,tgCurrentPos.y,dX,dY);
											AddMsg(str);
											Rotation(dX,dY,-dAngle,dX,dY);
											tgCurrentPos.x = tgAlignCenter.x + dX;
											tgCurrentPos.y = tgAlignCenter.y + dY;
											str.Format("CurrentPos(%0.3f,%0.3f),ImageCenter(%0.3f,%0.3f),tgOffset(%0.3f,%0.3f),Angle = %0.3f,Offset(%0.3f,%0.3f)",
												tgCurrentPos.x,tgCurrentPos.y,tgImageCenter.x,tgImageCenter.y,tgOffset.x,tgOffset.y,dAngle,dX,dY);
											AddMsg(str);
											if(!SynchronizeMoveXY(tgCurrentPos.x,tgCurrentPos.y,true))
											{
												return;
											}
											if(!SynchronizeMoveZ(tgCurrentPos.z,true))
											{
												return;
											}
											Sleep(1000);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	m_tStatus = K_RUN_STS_STOP;
}

bool CCmdRun::FindTwoImageOffset(tgPos tgStartPos,tgPos tgEndPos,double &dOffsetX,double &dOffsetY,double &dRotateAngle,bool bTest)
{
	CString strFile,strText;
	double dCenterX[2];
	double dCenterY[2];
	double dAngle[2];
	double dOffsetX1,dOffsetY1,dOffsetX2,dOffsetY2;
	double dBmpOffset = 0.5;
	tgPos tgEndBmpOffset,tgStartBmpOffset;
	bool bMamualAlign = false;
	tgEndBmpOffset.x = 0.0;
	tgEndBmpOffset.y = 0.0;
	tgStartBmpOffset.x = 0.0;
	tgStartBmpOffset.y = 0.0;
	dOffsetX1 = 0.0;
	dOffsetY1 = 0.0;
	dOffsetX2 = 0.0;
	dOffsetY2 = 0.0;
	if(!MoveToZSafety())
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}

	if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y,true))
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}
	//m_pMv->Move(K_AXIS_ZA,tgEndPos.z,ProductParam.FreeVal,ProductParam.FreeAcc,TRUE);
	if(!SynchronizeMoveZ(tgEndPos.z,true))
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}

	CString str;
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	str.Format("start CopyImage");
	m_pLog->log(str);
	g_pView->m_ImgStatic.CopyImage(RGB8);
	str.Format("start GetModeFile");
	m_pLog->log(str);
	strFile = g_pDoc->GetModeFile(ProductParam.nImageNum-1);
	//milApp.SetMatchMode(ProductParam.matchMode);
	str.Format("start RestoreModel:&s",strFile);
	m_pLog->log(str);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	str.Format("start SetPatParam");
	m_pLog->log(str);
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	str.Format("start SetModelWindow");
	m_pLog->log(str);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[ProductParam.nImageNum-1]);
	str.Format("start SetSearchWindow");
	m_pLog->log(str);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	str.Format("start FindModel");
	m_pLog->log(str);
	//if(!milApp.FindModel())
	//{
	//	AddMsg("图像位置2检测异常");
	//	return false;
	//}
	while(!milApp.FindModel())
	{
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		if(!SynchronizeMoveXY(tgEndPos.x-dBmpOffset,tgEndPos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = -dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y-dBmpOffset,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = -dBmpOffset;
			break;
		}
		if(!SynchronizeMoveXY(tgEndPos.x+dBmpOffset,tgEndPos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgEndPos.x,tgEndPos.y+dBmpOffset,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = dBmpOffset;
			break;
		}
		AddMsg("图像位置2检测异常");
		m_bIsSupend = true;
		if(AfxMessageBox("手动查找图像",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			return false;
		}
		else
		{
			CDlgManualAlign manualAlign;
			if(IDOK!=manualAlign.DoModal())
			{
				m_bIsSupend = false;
				return false;
			}
			else
			{
				dOffsetX2 = tgEndPos.x - m_pMv->GetPos(K_AXIS_X);
				dOffsetY2 = tgEndPos.y - m_pMv->GetPos(K_AXIS_Y);
				tgEndBmpOffset.x = 0;
				tgEndBmpOffset.y = 0;
				bMamualAlign = true;
				m_bIsSupend = false;
				break;
			}
		}
		m_bIsSupend = false;
	}
	if(!bMamualAlign)
	{
		dCenterX[1] = milApp.m_stResult.dResultCenterX[0];
		dCenterY[1] = milApp.m_stResult.dResultCenterY[0];
		dAngle[1] = milApp.m_stResult.dResultAngle[0];
		strText.Format("左上角图像查找结果:CenterX=%.3f,CenterY=%.3f,Angle=%.3f,Score=%.3f",milApp.m_stResult.dResultCenterX[0],
			milApp.m_stResult.dResultCenterY[0],milApp.m_stResult.dResultAngle[0],milApp.m_stResult.dResultScore[0]);
		AddMsg(strText);
		theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(dCenterX[1]-(milApp.m_lBufSizeX-1)/2,
			dCenterY[1]-(milApp.m_lBufSizeY-1)/2,dOffsetX2,dOffsetY2);
		dOffsetX2 -= tgEndBmpOffset.x;
		dOffsetY2 -= tgEndBmpOffset.y;
	}
	strText.Format("左上角图像偏移:OffsetX=%.3f,OffsetY=%.3f",dOffsetX2,dOffsetY2);
	AddMsg(strText);

	bMamualAlign = false;
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}
	if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y,true))
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}
	//m_pMv->Move(K_AXIS_ZA,tgStartPos.z,ProductParam.FreeVal,ProductParam.FreeAcc,TRUE);
	if(!SynchronizeMoveZ(tgStartPos.z,true))
	{
		return false;
	}
	strFile = g_pDoc->GetModeFile(0);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[0]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	g_pView->m_ImgStatic.CopyImage(RGB8);
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}
	while(!milApp.FindModel())
	{
		if(!SynchronizeMoveXY(tgStartPos.x-dBmpOffset,tgStartPos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = -dBmpOffset;
			tgStartBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y-dBmpOffset,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = 0.0;
			tgStartBmpOffset.y = -dBmpOffset;
			break;
		}
		if(!SynchronizeMoveXY(tgStartPos.x+dBmpOffset,tgStartPos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = dBmpOffset;
			tgStartBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgStartPos.x,tgStartPos.y+dBmpOffset,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgStartBmpOffset.x = 0.0;
			tgStartBmpOffset.y = dBmpOffset;
			break;
		}
		AddMsg("图像位置1检测异常");
		m_bIsSupend = true;
		if(AfxMessageBox("手动查找图像",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			return false;
		}
		else
		{
			CDlgManualAlign manualAlign;
			if(IDOK!=manualAlign.DoModal())
			{
				m_bIsSupend = false;
				return false;
			}
			else
			{
				dOffsetX1 = tgStartPos.x - m_pMv->GetPos(K_AXIS_X);
				dOffsetY1 = tgStartPos.y - m_pMv->GetPos(K_AXIS_Y);
				tgStartBmpOffset.x = 0;
				tgStartBmpOffset.y = 0;
				bMamualAlign = true;
				m_bIsSupend = false;
				break;
			}
		}
		m_bIsSupend = false;
	}
	if(!bMamualAlign)
	{
		dCenterX[0] = milApp.m_stResult.dResultCenterX[0];
		dCenterY[0] = milApp.m_stResult.dResultCenterY[0];
		dAngle[0] = milApp.m_stResult.dResultAngle[0];
		strText.Format("右下角角图像查找结果:CenterX=%.3f,CenterY=%.3f,Angle=%.3f,Score=%.3f",milApp.m_stResult.dResultCenterX[0],
			milApp.m_stResult.dResultCenterY[0],milApp.m_stResult.dResultAngle[0],milApp.m_stResult.dResultScore[0]);
		AddMsg(strText);

		theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(dCenterX[0]-(milApp.m_lBufSizeX-1)/2,
			dCenterY[0]-(milApp.m_lBufSizeY-1)/2,dOffsetX1,dOffsetY1);
		dOffsetX1 -= tgStartBmpOffset.x;
		dOffsetY1 -= tgStartBmpOffset.y;
	}
	strText.Format("右下角图像偏移:OffsetX=%.3f,OffsetY=%.3f",dOffsetX1,dOffsetY1);
	AddMsg(strText);

	dOffsetX = (dOffsetX1+dOffsetX2)/2;
	dOffsetY = (dOffsetY1+dOffsetY2)/2;
	dRotateAngle = CalculateAngle((tgEndPos.x-dOffsetX2)-(tgStartPos.x-dOffsetX1),(tgEndPos.y-dOffsetY2)-(tgStartPos.y-dOffsetY1))-
		CalculateAngle(tgEndPos.x-tgStartPos.x,tgEndPos.y-tgStartPos.y);
	return true;
}

bool CCmdRun::FindOneImageOffset(tgPos tgImagePos,double &dOffsetX,double &dOffsetY,bool bTest)
{
	CString strFile,strText;
	double dCenterX[2];
	double dCenterY[2];
	double dBmpOffset = 0.5;
	tgPos tgEndBmpOffset;
	bool bMamualAlign = false;
	tgEndBmpOffset.x = 0.0;
	tgEndBmpOffset.y = 0.0;
	if(!MoveToZSafety())
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}

	if(!SynchronizeMoveXY(tgImagePos.x,tgImagePos.y,true))
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}
	//m_pMv->Move(K_AXIS_ZA,tgImagePos.z,ProductParam.FreeVal,ProductParam.FreeAcc,TRUE);
	if(!SynchronizeMoveZ(tgImagePos.z,true))
	{
		return false;
	}
	if(!bTest)
	{
		if(IsExitRun())
		{
			return false;
		}
	}

	Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
	g_pView->m_ImgStatic.CopyImage(RGB8);
	strFile = g_pDoc->GetModeFile(0);
	//milApp.SetMatchMode(ProductParam.matchMode);
	milApp.RestoreModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPatParam(theApp.m_tSysParam.BmpMarkAcceptance,theApp.m_tSysParam.BmpMarkAngle);
	milApp.SetModelWindow(theApp.m_tSysParam.BmpMarkLearnWin[0]);
	milApp.SetSearchWindow(theApp.m_tSysParam.BmpMarkROI);
	//if(!milApp.FindModel())
	//{
	//	AddMsg("图像位置2检测异常");
	//	return false;
	//}
	while(!milApp.FindModel())
	{
		if(!SynchronizeMoveXY(tgImagePos.x-dBmpOffset,tgImagePos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = -dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgImagePos.x,tgImagePos.y-dBmpOffset,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = -dBmpOffset;
			break;
		}
		if(!SynchronizeMoveXY(tgImagePos.x+dBmpOffset,tgImagePos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = dBmpOffset;
			tgEndBmpOffset.y = 0.0;
			break;
		}
		if(!SynchronizeMoveXY(tgImagePos.x+dBmpOffset,tgImagePos.y,true))
		{
			return false;
		}
		if(!bTest)
		{
			if(IsExitRun())
			{
				return false;
			}
		}
		Sleep(DWORD(ProductParam.dGrabImageDelay*1000));
		g_pView->m_ImgStatic.CopyImage(RGB8);
		if(milApp.FindModel())
		{
			tgEndBmpOffset.x = 0.0;
			tgEndBmpOffset.y = dBmpOffset;
			break;
		}
		AddMsg("图像位置2检测异常");
		m_bIsSupend = true;
		if(AfxMessageBox("手动查找图像",MB_YESNO)!=IDYES)
		{
			m_bIsSupend = false;
			return false;
		}
		else
		{
			CDlgManualAlign manualAlign;
			if(IDOK!=manualAlign.DoModal())
			{
				m_bIsSupend = false;
				return false;
			}
			else
			{
				dOffsetX = tgImagePos.x - m_pMv->GetPos(K_AXIS_X);
				dOffsetY = tgImagePos.y - m_pMv->GetPos(K_AXIS_Y);
				tgEndBmpOffset.x = 0;
				tgEndBmpOffset.y = 0;
				bMamualAlign = true;
				m_bIsSupend = false;
				break;
			}
		}
		m_bIsSupend = false;
	}
	if(!bMamualAlign)
	{
		dCenterX[1] = milApp.m_stResult.dResultCenterX[0];
		dCenterY[1] = milApp.m_stResult.dResultCenterY[0];
		strText.Format("左上角图像查找结果:CenterX=%.3f,CenterY=%.3f,Angle=%.3f,Score=%.3f",milApp.m_stResult.dResultCenterX[0],
			milApp.m_stResult.dResultCenterY[0],milApp.m_stResult.dResultAngle[0],milApp.m_stResult.dResultScore[0]);
		AddMsg(strText);
		theApp.m_tSysParam.BmpMarkCalibration.ConvertPixelToTable(dCenterX[1]-(milApp.m_lBufSizeX-1)/2,
			dCenterY[1]-(milApp.m_lBufSizeY-1)/2,dOffsetX,dOffsetY);
		dOffsetX -= tgEndBmpOffset.x;
		dOffsetY -= tgEndBmpOffset.y;
	}
	strText.Format("左上角图像偏移:OffsetX=%.3f,OffsetY=%.3f",dOffsetX,dOffsetY);
	AddMsg(strText);
	return true;
}

bool CCmdRun::FindImageOffset(double &dOffsetX,double &dOffsetY,double &dAngle,bool bTest)
{
	dOffsetX = 0;
	dOffsetY = 0;
	dAngle = 0;
	CString str;
	double dTempAngle = 0.0;
	tgPos tgTempPos,tgStartPos,tgEndPos;
	if((VISION_TWO_MARK == g_pFrm->m_CmdRun.ProductParam.visionMode)&&(2==g_pFrm->m_CmdRun.ProductParam.nImageNum))
	{
		tgStartPos.x = g_pFrm->m_CmdRun.ProductParam.tgImagePos[0].x;
		tgStartPos.y = g_pFrm->m_CmdRun.ProductParam.tgImagePos[0].y;
		tgStartPos.z = g_pFrm->m_CmdRun.ProductParam.tgImagePos[0].z;
		tgEndPos.x = g_pFrm->m_CmdRun.ProductParam.tgImagePos[1].x;
		tgEndPos.y = g_pFrm->m_CmdRun.ProductParam.tgImagePos[1].y;
		tgEndPos.z = g_pFrm->m_CmdRun.ProductParam.tgImagePos[1].z;
		if(!FindTwoImageOffset(tgStartPos,tgEndPos,dOffsetX,dOffsetY,dAngle,bTest))
		{
			dOffsetX = 0;
			dOffsetY = 0;
			dAngle = 0;
			return false;
		}
	}
	else if((VISION_ONE_MARK == g_pFrm->m_CmdRun.ProductParam.visionMode)&&(1==g_pFrm->m_CmdRun.ProductParam.nImageNum))
	{
		if(!FindOneImageOffset(ProductParam.tgImagePos[0],dOffsetX,dOffsetY,bTest))
		{
			dOffsetX = 0;
			dOffsetY = 0;
			return false;
		}
	}
	return true;
}

bool CCmdRun::SingleDispense()
{
	int nSelValve = 0;
	for(int i=0;i<3;i++)
	{
		if(i==0)
		{
			ProductParam.FSelectVal[i] = true;
			RunDispFSelect[i] = true;
		}
		else
		{
			ProductParam.FSelectVal[i] = false;
			RunDispFSelect[i] = false;
		}
		//if(ProductParam.FSelectVal[i])
		//{
		//	RunDispFSelect[i] = true;
		//	nSelValve = i;
		//	break;
		//}
	}
	ProductParam.DispFCount = 1;
	//SynchronizeMoveXY(PDposting[0].Dx-ProductParam.NeedleGap*nSelValve,PDposting[0].Dy,true);
	//SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true);
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nIrregularCol = 0;
			}
			for(int i=ProductParam.tgTrackInfo.m_nIrregularCol;i<ProductParam.IrregularColumn;i++)
			{
				if(!(i%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow;j<ProductParam.IrregularRow;j++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if(!PDposting[nDisNumber].bIsHasPad)
						{
							RunDispFSelect[nSelValve] = false;
						}
						PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
						if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
							&PDposting[nDisNumber].Dz,NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
						if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
						{
							if(m_bDispenseSuccess)
							{
								if(RunDispFSelect[nSelValve])
								{
									PDposting[nDisNumber].bIsCompleted = true;
								}
								ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
							}
							return false;
						}
						if(RunDispFSelect[nSelValve])
						{
							PDposting[nDisNumber].bIsCompleted = true;
						}
						RunDispFSelect[nSelValve] = true;
						ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = ProductParam.IrregularRow;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if(!PDposting[nDisNumber].bIsHasPad)
						{
							RunDispFSelect[nSelValve] = false;
						}
						PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
						if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
							&PDposting[nDisNumber].Dz,NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
						if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
						{
							if(m_bDispenseSuccess)
							{
								if(RunDispFSelect[nSelValve])
								{
									PDposting[nDisNumber].bIsCompleted = true;
								}
								ProductParam.tgTrackInfo.m_nIrregularRow = j;
							}
							return false;
						}
						if(RunDispFSelect[nSelValve])
						{
							PDposting[nDisNumber].bIsCompleted = true;
						}
						RunDispFSelect[nSelValve] = true;
						ProductParam.tgTrackInfo.m_nIrregularRow = j;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
			}
		}
		else
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nIrregularRow = 0;
			}
			for(int i=ProductParam.tgTrackInfo.m_nIrregularRow;i<ProductParam.IrregularRow;i++)
			{
				if(!(i%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularCol;j<ProductParam.IrregularColumn;j++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = j+i*ProductParam.IrregularColumn;
						if(!PDposting[nDisNumber].bIsHasPad)
						{
							RunDispFSelect[nSelValve] = false;
						}
						PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
						if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,&PDposting[nDisNumber].Dz,NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
						if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
						{
							if(m_bDispenseSuccess)
							{
								if(RunDispFSelect[nSelValve])
								{
									PDposting[nDisNumber].bIsCompleted = true;
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = j+1;
							}
							return false;
						}
						if(RunDispFSelect[nSelValve])
						{
							PDposting[nDisNumber].bIsCompleted = true;
						}
						RunDispFSelect[nSelValve] = true;
						ProductParam.tgTrackInfo.m_nIrregularCol = j+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = ProductParam.IrregularColumn;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularCol-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = j+i*ProductParam.IrregularColumn;
						if(!PDposting[nDisNumber].bIsHasPad)
						{
							RunDispFSelect[nSelValve] = false;
						}
						PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
						if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
							&PDposting[nDisNumber].Dz,NULL))
						{
							AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
							return false;
						}
						if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
						{
							if(m_bDispenseSuccess)
							{
								if(RunDispFSelect[nSelValve])
								{
									PDposting[nDisNumber].bIsCompleted = true;
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = j;
							}
							return false;
						}
						if(RunDispFSelect[nSelValve])
						{
							PDposting[nDisNumber].bIsCompleted = true;
						}
						RunDispFSelect[nSelValve] = true;
						ProductParam.tgTrackInfo.m_nIrregularCol = j;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularRow = i+1;
			}
		}
	}
	else
	{
		int secondNum = ProductParam.SecondDispColumn*ProductParam.SecondDispRow;
		int thirdNum = ProductParam.ThirdDispColumn*ProductParam.ThirdDispRow;
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nFirstCol = 0;
			}
			for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nSecondCol = 0;
				}
				for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nThirdCol = 0;
					}
					for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
					{
						if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
						{
							if(!m_bStartRun)
							{
								ProductParam.tgTrackInfo.m_nFirstRow = 0;
							}
							for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nSecondRow = 0;
								}
								for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nThirdRow = 0;
									}
									for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
									{
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										if(IsExitRun())
										{
											MoveToZSafety();
											m_tStatus =K_RUN_STS_STOP;
											return false;
										}
										int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*thirdNum+n*ProductParam.SecondDispColumn*thirdNum+
											i*secondNum*thirdNum+m*ProductParam.FirstDispColumn*secondNum*thirdNum;
										if(!PDposting[nDisNumber].bIsHasPad)
										{
											RunDispFSelect[nSelValve] = false;
										}
										PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
										if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
											&PDposting[nDisNumber].Dz,NULL))
										{
											AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
											return false;
										}
										if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											if(m_bDispenseSuccess)
											{
												if(RunDispFSelect[nSelValve])
												{
													PDposting[nDisNumber].bIsCompleted = true;
												}
												ProductParam.tgTrackInfo.m_nThirdRow = l+1;
											}
											return false;
										}
										if(RunDispFSelect[nSelValve])
										{
											PDposting[nDisNumber].bIsCompleted = true;
										}
										RunDispFSelect[nSelValve] = true;
										ProductParam.tgTrackInfo.m_nThirdRow = l+1;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nSecondRow = n+1;
								}
								if(m_bStartRun)
								{
									m_bStartRun = false;
								}
								ProductParam.tgTrackInfo.m_nFirstRow = m+1;
							}
						}
						else
						{
							if(!m_bStartRun)
							{
								ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
							}
							for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
								}
								for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
									}
									for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
									{
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										if(IsExitRun())
										{
											MoveToZSafety();
											m_tStatus =K_RUN_STS_STOP;
											return false;
										}
										int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*thirdNum+n*ProductParam.SecondDispColumn*thirdNum+
											i*secondNum*thirdNum+m*ProductParam.FirstDispColumn*secondNum*thirdNum;
										if(!PDposting[nDisNumber].bIsHasPad)
										{
											RunDispFSelect[nSelValve] = false;
										}
										PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
										if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
											&PDposting[nDisNumber].Dz,NULL))
										{
											AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
											return false;
										}
										if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											if(m_bDispenseSuccess)
											{
												if(RunDispFSelect[nSelValve])
												{
													PDposting[nDisNumber].bIsCompleted = true;
												}
												ProductParam.tgTrackInfo.m_nThirdRow = l;
											}
											return false;
										}
										if(RunDispFSelect[nSelValve])
										{
											PDposting[nDisNumber].bIsCompleted = true;
										}
										RunDispFSelect[nSelValve] = true;
										ProductParam.tgTrackInfo.m_nThirdRow = l;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nSecondRow = n;
								}
								if(m_bStartRun)
								{
									m_bStartRun = false;
								}
								ProductParam.tgTrackInfo.m_nFirstRow = m;
							}
						}
						ProductParam.tgTrackInfo.m_nThirdCol = k+1;
					}
					ProductParam.tgTrackInfo.m_nSecondCol = j+1;
				}
				ProductParam.tgTrackInfo.m_nFirstCol = i+1;
			}
		}
		else
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nFirstRow = 0;
			}
			for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nSecondRow = 0;
				}
				for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nThirdRow = 0;
					}
					for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
					{
						if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
						{
							if(!m_bStartRun)
							{
								ProductParam.tgTrackInfo.m_nFirstCol = 0;
							}
							for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nSecondCol = 0;
								}
								for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nThirdCol = 0;
									}
									for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
									{
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										if(IsExitRun())
										{
											MoveToZSafety();
											m_tStatus =K_RUN_STS_STOP;
											return false;
										}
										int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*thirdNum+n*ProductParam.SecondDispColumn*thirdNum+
											i*secondNum*thirdNum+m*ProductParam.FirstDispColumn*secondNum*thirdNum;
										if(!PDposting[nDisNumber].bIsHasPad)
										{
											RunDispFSelect[nSelValve] = false;
										}
										PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
										if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
											&PDposting[nDisNumber].Dz,NULL))
										{
											AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
											return false;
										}
										if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											if(m_bDispenseSuccess)
											{
												if(RunDispFSelect[nSelValve])
												{
													PDposting[nDisNumber].bIsCompleted = true;
												}
												ProductParam.tgTrackInfo.m_nThirdCol = k+1;
											}
											return false;
										}
										if(RunDispFSelect[nSelValve])
										{
											PDposting[nDisNumber].bIsCompleted = true;
										}
										RunDispFSelect[nSelValve] = true;
										ProductParam.tgTrackInfo.m_nThirdCol = k+1;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nSecondCol = j+1;
								}
								if(m_bStartRun)
								{
									m_bStartRun = false;
								}
								ProductParam.tgTrackInfo.m_nFirstCol = i+1;
							}
						}
						else
						{
							if(!m_bStartRun)
							{
								ProductParam.tgTrackInfo.m_nFirstCol = ProductParam.FirstDispColumn;
							}
							for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nSecondCol = ProductParam.SecondDispColumn;
								}
								for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nThirdCol = ProductParam.ThirdDispColumn;
									}
									for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
									{
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										if(IsExitRun())
										{
											MoveToZSafety();
											m_tStatus =K_RUN_STS_STOP;
											return false;
										}
										int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*thirdNum+n*ProductParam.SecondDispColumn*thirdNum+
											i*secondNum*thirdNum+m*ProductParam.FirstDispColumn*secondNum*thirdNum;
										if(!PDposting[nDisNumber].bIsHasPad)
										{
											RunDispFSelect[nSelValve] = false;
										}
										PDposting[nDisNumber].Dx -= ProductParam.NeedleGap*nSelValve;
										if(!m_pMv->WarnCheckPos(&PDposting[nDisNumber].Dx,&PDposting[nDisNumber].Dy,
											&PDposting[nDisNumber].Dz,NULL))
										{
											AfxMessageBox("超出电机行程范围，请检测产品参数的设定");
											return false;
										}
										if(!SingleDot(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											if(m_bDispenseSuccess)
											{
												if(RunDispFSelect[nSelValve])
												{
													PDposting[nDisNumber].bIsCompleted = true;
												}
												ProductParam.tgTrackInfo.m_nThirdCol = k;
											}
											return false;
										}
										if(RunDispFSelect[nSelValve])
										{
											PDposting[nDisNumber].bIsCompleted = true;
										}
										RunDispFSelect[nSelValve] = true;
										ProductParam.tgTrackInfo.m_nThirdCol = k;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nSecondCol = j;
								}
								if(m_bStartRun)
								{
									m_bStartRun = false;
								}
								ProductParam.tgTrackInfo.m_nFirstCol = i;
							}
						}
						ProductParam.tgTrackInfo.m_nThirdRow = l+1;
					}
					ProductParam.tgTrackInfo.m_nSecondRow = n+1;
				}
				ProductParam.tgTrackInfo.m_nFirstRow = m+1;
			}
		}
	}
	return true;
}

bool CCmdRun::SecondDispense()
{
	g_pFrm->m_CmdRun.ProductParam.FSelectVal[2] = false;
	RunDispFSelect[2] = false;
	//SynchronizeMoveXY(PDposting[0].Dx,PDposting[0].Dy,true);
	//SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true);
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nIrregularCol = 0;
			}
			for(int i=ProductParam.tgTrackInfo.m_nIrregularCol;i<(ProductParam.IrregularColumn+1)/2;i++)
			{
				if(!(i%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow;j<ProductParam.IrregularRow;j++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+1)/2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<2;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
									}
									ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
								}
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = ProductParam.IrregularRow;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+1)/2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<2;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
									}
									ProductParam.tgTrackInfo.m_nIrregularRow = j;
								}
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularRow = j;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
			}
		}
		else
		{
			for(int j=ProductParam.tgTrackInfo.m_nIrregularRow;j<ProductParam.IrregularRow;j++)
			{
				if(!(j%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = 0;
					}
					for(int i=ProductParam.tgTrackInfo.m_nIrregularCol;i<(ProductParam.IrregularColumn+1)/2;i++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+1)/2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<2;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = ProductParam.IrregularColumn;
					}
					for(int i=ProductParam.tgTrackInfo.m_nIrregularCol-1;i>=0;i--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+1)/2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[1])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<2;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = i;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<2;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+1)/2*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularCol = i;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<(ProductParam.FirstDispColumn+1)/2;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+1)/2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+1)/2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nThirdCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<(ProductParam.SecondDispColumn+1)/2;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+1)/2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+1)/2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
			else
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<(ProductParam.ThirdDispColumn+1)/2;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+1)/2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+1)/2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<(ProductParam.FirstDispColumn+1)/2;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+1)/2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = (ProductParam.FirstDispColumn+1)/2;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = ProductParam.SecondDispColumn;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = ProductParam.ThirdDispColumn;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+1)/2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<(ProductParam.SecondDispColumn+1)/2;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+1)/2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = ProductParam.FirstDispColumn;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = (ProductParam.SecondDispColumn+1)/2;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = ProductParam.ThirdDispColumn;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+1)/2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
			else
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<(ProductParam.ThirdDispColumn+1)/2;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+1)/2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = ProductParam.FirstDispColumn;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = ProductParam.SecondDispColumn;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = (ProductParam.ThirdDispColumn+1)/2;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+1)/2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[1]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[1])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[1] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<2;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<2;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+1)/2*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
		}
	}
	return true;
}

bool CCmdRun::ThirdDispense()
{
	//if(!SynchronizeMoveXY(PDposting[0].Dx,PDposting[0].Dy,true))
	//{
	//	return false;
	//}
	//if(!SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true))
	//{
	//	return false;
	//}
	if(IsExitRun())
	{
		MoveToZSafety();
		return false;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nIrregularCol = 0;
			}
			for(int i=ProductParam.tgTrackInfo.m_nIrregularCol;i<(ProductParam.IrregularColumn+2)/3;i++)
			{
				if(!(i%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow;j<ProductParam.IrregularRow;j++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+2)/3*2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<3;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularRow = ProductParam.IrregularRow;
					}
					for(int j=ProductParam.tgTrackInfo.m_nIrregularRow-1;j>=0;j--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+2)/3*2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<3;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularRow = j;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularRow = j;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
			}
		}
		else
		{
			if(!m_bStartRun)
			{
				ProductParam.tgTrackInfo.m_nIrregularRow = 0;
			}
			for(int j=ProductParam.tgTrackInfo.m_nIrregularRow;j<ProductParam.IrregularRow;j++)
			{
				if(!(j%2))
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = 0;
					}
					for(int i=ProductParam.tgTrackInfo.m_nIrregularCol;i<(ProductParam.IrregularColumn+2)/3;i++)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+2)/3*2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<3;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularCol = i+1;
					}
				}
				else
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nIrregularCol = ProductParam.IrregularColumn;
					}
					for(int i=ProductParam.tgTrackInfo.m_nIrregularCol-1;i>=0;i--)
					{
						if(IsExitRun())
						{
							MoveToZSafety();
							m_tStatus =K_RUN_STS_STOP;
							return false;
						}
						int nDisNumber = i+j*ProductParam.IrregularColumn;
						if((i+(ProductParam.IrregularColumn+2)/3*2)<ProductParam.IrregularColumn)
						{
							if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						else
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[2])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
								g_pFrm->m_CmdRun.ProductParam.DispFCount--;
							}
						}
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								if(!PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsHasPad)
								{
									g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
									g_pFrm->m_CmdRun.ProductParam.DispFCount--;
								}
							}
						}
						if(!SingleDot(nDisNumber))
						{
							if(m_bDispenseSuccess)
							{
								for(int r=0;r<3;r++)
								{
									if(g_pFrm->m_CmdRun.RunDispFSelect[r])
									{
										PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
									}
								}
								ProductParam.tgTrackInfo.m_nIrregularCol = i;
							}
							return false;
						}
						g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
						for(int r=0;r<3;r++)
						{
							if(g_pFrm->m_CmdRun.RunDispFSelect[r])
							{
								PDposting[nDisNumber+(ProductParam.IrregularColumn+2)/3*r].bIsCompleted = true;
							}
							if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
							{
								g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
								g_pFrm->m_CmdRun.ProductParam.DispFCount++;
							}
						}
						ProductParam.tgTrackInfo.m_nIrregularCol = i;
					}
				}
				ProductParam.tgTrackInfo.m_nIrregularRow = j+1;
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<(ProductParam.FirstDispColumn+2)/3;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+2)/3*2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+2)/3*2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<(ProductParam.SecondDispColumn+2)/3;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
						{
							if(!((i*(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+2)/3*2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+2)/3*2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
			else
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstCol = 0;
				}
				for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondCol = 0;
					}
					for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdCol = 0;
						}
						for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<(ProductParam.ThirdDispColumn+2)/3;k++)
						{
							if(!((i*ProductParam.SecondDispColumn*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispColumn+k)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = 0;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = 0;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = 0;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus = K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+2)/3*2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = false;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n+1;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstRow = ProductParam.FirstDispRow;
								}
								for(int m=ProductParam.tgTrackInfo.m_nFirstRow-1;m>=0;m--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondRow = ProductParam.SecondDispRow;
									}
									for(int n=ProductParam.tgTrackInfo.m_nSecondRow-1;n>=0;n--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdRow = ProductParam.ThirdDispRow;
										}
										for(int l=ProductParam.tgTrackInfo.m_nThirdRow-1;l>=0;l--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+2)/3*2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdRow = l;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdRow = l;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondRow = n;
									}
									ProductParam.tgTrackInfo.m_nFirstRow = m;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdCol = k+1;
						}
						ProductParam.tgTrackInfo.m_nSecondCol = j+1;
					}
					ProductParam.tgTrackInfo.m_nFirstCol = i+1;
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<(ProductParam.FirstDispColumn+2)/3;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+2)/3*2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = (ProductParam.FirstDispColumn+2)/3;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = ProductParam.SecondDispColumn;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = ProductParam.ThirdDispColumn;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((i+(ProductParam.FirstDispColumn+2)/3*2)<ProductParam.FirstDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<(ProductParam.SecondDispColumn+2)/3;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<ProductParam.ThirdDispColumn;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+2)/3*2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = ProductParam.FirstDispColumn;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = (ProductParam.SecondDispColumn+2)/3;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = ProductParam.ThirdDispColumn;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus = K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((j+(ProductParam.SecondDispColumn+2)/3*2)<ProductParam.SecondDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
			else
			{
				if(!m_bStartRun)
				{
					ProductParam.tgTrackInfo.m_nFirstRow = 0;
				}
				for(int m=ProductParam.tgTrackInfo.m_nFirstRow;m<ProductParam.FirstDispRow;m++)
				{
					if(!m_bStartRun)
					{
						ProductParam.tgTrackInfo.m_nSecondRow = 0;
					}
					for(int n=ProductParam.tgTrackInfo.m_nSecondRow;n<ProductParam.SecondDispRow;n++)
					{
						if(!m_bStartRun)
						{
							ProductParam.tgTrackInfo.m_nThirdRow = 0;
						}
						for(int l=ProductParam.tgTrackInfo.m_nThirdRow;l<ProductParam.ThirdDispRow;l++)
						{
							if(!((m*ProductParam.SecondDispRow*ProductParam.ThirdDispRow+n*ProductParam.ThirdDispRow+l)%2))
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = 0;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol;i<ProductParam.FirstDispColumn;i++)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = 0;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol;j<ProductParam.SecondDispColumn;j++)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = 0;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol;k<(ProductParam.ThirdDispColumn+2)/3;k++)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+2)/3*2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k+1;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k+1;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j+1;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i+1;
								}
							}
							else
							{
								if(!m_bStartRun)
								{
									ProductParam.tgTrackInfo.m_nFirstCol = ProductParam.FirstDispColumn;
								}
								for(int i=ProductParam.tgTrackInfo.m_nFirstCol-1;i>=0;i--)
								{
									if(!m_bStartRun)
									{
										ProductParam.tgTrackInfo.m_nSecondCol = ProductParam.SecondDispColumn;
									}
									for(int j=ProductParam.tgTrackInfo.m_nSecondCol-1;j>=0;j--)
									{
										if(!m_bStartRun)
										{
											ProductParam.tgTrackInfo.m_nThirdCol = (ProductParam.ThirdDispColumn+2)/3;
										}
										for(int k=ProductParam.tgTrackInfo.m_nThirdCol-1;k>=0;k--)
										{
											if(m_bStartRun)
											{
												m_bStartRun = false;
											}
											if(IsExitRun())
											{
												MoveToZSafety();
												m_tStatus =K_RUN_STS_STOP;
												return false;
											}
											int nDisNumber = k+l*ProductParam.ThirdDispColumn+j*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+n*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
												i*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
											if((k+(ProductParam.ThirdDispColumn+2)/3*2)<ProductParam.ThirdDispColumn)
											{
												if(!g_pFrm->m_CmdRun.RunDispFSelect[2]&&g_pFrm->m_CmdRun.ProductParam.FSelectVal[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 1;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											else
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[2])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[2] = 0;
													g_pFrm->m_CmdRun.ProductParam.DispFCount--;
												}
											}
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													if(!PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsHasPad)
													{
														g_pFrm->m_CmdRun.RunDispFSelect[r] = false;
														g_pFrm->m_CmdRun.ProductParam.DispFCount--;
													}
												}
											}
											if(!SingleDot(nDisNumber))
											{
												if(m_bDispenseSuccess)
												{
													for(int r=0;r<3;r++)
													{
														if(g_pFrm->m_CmdRun.RunDispFSelect[r])
														{
															PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
														}
													}
													ProductParam.tgTrackInfo.m_nThirdCol = k;
												}
												return false;
											}
											g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
											for(int r=0;r<3;r++)
											{
												if(g_pFrm->m_CmdRun.RunDispFSelect[r])
												{
													PDposting[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*r].bIsCompleted = true;
												}
												if(g_pFrm->m_CmdRun.ProductParam.FSelectVal[r])
												{
													g_pFrm->m_CmdRun.RunDispFSelect[r] = true;
													g_pFrm->m_CmdRun.ProductParam.DispFCount++;
												}
											}
											ProductParam.tgTrackInfo.m_nThirdCol = k;
										}
										if(m_bStartRun)
										{
											m_bStartRun = false;
										}
										ProductParam.tgTrackInfo.m_nSecondCol = j;
									}
									if(m_bStartRun)
									{
										m_bStartRun = false;
									}
									ProductParam.tgTrackInfo.m_nFirstCol = i;
								}
							}
							ProductParam.tgTrackInfo.m_nThirdRow = l+1;
						}
						ProductParam.tgTrackInfo.m_nSecondRow = n+1;
					}
					ProductParam.tgTrackInfo.m_nFirstRow = m+1;
				}
			}
		}
	}
	return true;
}

void CCmdRun::OneValveRepaire(bool *bIsDispense)
{
	CString str;
	int nSelValve = 0;
	for(int i=0;i<3;i++)
	{
		if(i==0)
		{
			ProductParam.FSelectVal[i] = true;
			RunDispFSelect[i] = true;
			nSelValve = i;
		}
		else
		{
			ProductParam.FSelectVal[i] = false;
			RunDispFSelect[i] = false;
		}
		//if(ProductParam.FSelectVal[i])
		//{
		//	nSelValve = i;
		//	break;
		//}
	}
	//if(!SynchronizeMoveXY(PDposting[0].Dx-ProductParam.NeedleGap*nSelValve,PDposting[0].Dy,true))
	//{
	//	return;
	//}
	//if(!SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true))
	//{
	//	return;
	//}
	if(IsExitRun())
	{
		MoveToZSafety();
		return ;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int j=0;j<ProductParam.IrregularColumn;j++)
			{
				for(int i=0;i<ProductParam.IrregularRow;i++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[nSelValve] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount=1;
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx-ProductParam.NeedleGap*nSelValve,
						PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					RunDispFSelect[nSelValve] = false;
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.IrregularRow;i++)
			{
				for(int j=0;j<ProductParam.IrregularColumn;j++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[nSelValve] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount=1;
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx-ProductParam.NeedleGap*nSelValve,
						PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					RunDispFSelect[nSelValve] = false;
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int j=0;j<ProductParam.FirstDispColumn;j++)
			{
				for(int n=0;n<ProductParam.SecondDispColumn;n++)
				{
					for(int l=0;l<ProductParam.ThirdDispColumn;l++)
					{
						for(int i=0;i<ProductParam.FirstDispRow;i++)
						{
							for(int m=0;m<ProductParam.SecondDispRow;m++)
							{
								for(int k=0;k<ProductParam.ThirdDispRow;k++)
								{
									int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
										j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
									if(bIsDispense[nDisNumber])
									{
										str.Format("RunDisp:%d",nDisNumber);
										AddMsg(str);
										g_pFrm->m_CmdRun.RunDispFSelect[nSelValve] = true;
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 1;
									}
									if(!SelectDispense(PDposting[nDisNumber].Dx-ProductParam.NeedleGap*nSelValve,
										PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
									{
										m_bRepair = false;
										MoveToZSafety();
										m_tStatus = K_RUN_STS_STOP;
										Stop();
										return;
									}
									g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
									RunDispFSelect[nSelValve] = false;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.FirstDispRow;i++)
			{
				for(int m=0;m<ProductParam.SecondDispRow;m++)
				{
					for(int k=0;k<ProductParam.ThirdDispRow;k++)
					{
						for(int j=0;j<ProductParam.FirstDispColumn;j++)
						{
							for(int n=0;n<ProductParam.SecondDispColumn;n++)
							{
								for(int l=0;l<ProductParam.ThirdDispColumn;l++)
								{
									int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
										j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
									if(bIsDispense[nDisNumber])
									{
										str.Format("RunDisp:%d",nDisNumber);
										AddMsg(str);
										g_pFrm->m_CmdRun.RunDispFSelect[nSelValve] = true;
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 1;
									}
									if(!SelectDispense(PDposting[nDisNumber].Dx-ProductParam.NeedleGap*nSelValve,
										PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
									{
										m_bRepair = false;
										MoveToZSafety();
										m_tStatus = K_RUN_STS_STOP;
										Stop();
										return;
									}
									g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
									RunDispFSelect[nSelValve] = false;
								}
							}
						}
					}
				}
			}
		}
	}
}

void CCmdRun::TwoValveRepaire(bool *bIsDispense)
{
	CString str;
	ProductParam.FSelectVal[2] = false;
	RunDispFSelect[2] = false;
	//if(!SynchronizeMoveXY(PDposting[0].Dx,PDposting[0].Dy,true))
	//{
	//	return;
	//}
	//if(!SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true))
	//{
	//	return;
	//}
	if(IsExitRun())
	{
		MoveToZSafety();
		return ;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int j=0;j<(ProductParam.IrregularColumn+1)/2;j++)
			{
				for(int i=0;i<ProductParam.IrregularRow;i++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(j+(ProductParam.IrregularColumn+1)/2<ProductParam.IrregularColumn)
					{
						if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+1)/2])
						{
							str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+1)/2);
							AddMsg(str);
							g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
							g_pFrm->m_CmdRun.ProductParam.DispFCount++;
						}
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					for(int i=0;i<2;i++)
					{
						RunDispFSelect[i] = false;
					}
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.IrregularRow;i++)
			{
				for(int j=0;j<(ProductParam.IrregularColumn+1)/2;j++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(j+(ProductParam.IrregularColumn+1)/2<ProductParam.IrregularColumn)
					{
						if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+1)/2])
						{
							str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+1)/2);
							AddMsg(str);
							g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
							g_pFrm->m_CmdRun.ProductParam.DispFCount++;
						}
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					for(int i=0;i<2;i++)
					{
						RunDispFSelect[i] = false;
					}
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int j=0;j<(ProductParam.FirstDispColumn+1)/2;j++)
				{
					for(int n=0;n<ProductParam.SecondDispColumn;n++)
					{
						for(int l=0;l<ProductParam.ThirdDispColumn;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											str.Format("RunDisp:%d",nDisNumber);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(j+(ProductParam.FirstDispColumn+1)/2<ProductParam.FirstDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
												AddMsg(str);
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int j=0;j<ProductParam.FirstDispColumn;j++)
				{
					for(int n=0;n<(ProductParam.SecondDispColumn+1)/2;n++)
					{
						for(int l=0;l<ProductParam.ThirdDispColumn;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(n+(ProductParam.SecondDispColumn+1)/2<ProductParam.SecondDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int j=0;j<ProductParam.FirstDispColumn;j++)
				{
					for(int n=0;n<ProductParam.SecondDispColumn;n++)
					{
						for(int l=0;l<(ProductParam.ThirdDispColumn+1)/2;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(l+(ProductParam.ThirdDispColumn+1)/2<ProductParam.ThirdDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+1)/2])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<(ProductParam.FirstDispColumn+1)/2;j++)
							{
								for(int n=0;n<ProductParam.SecondDispColumn;n++)
								{
									for(int l=0;l<ProductParam.ThirdDispColumn;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											str.Format("RunDisp:%d",nDisNumber);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(j+(ProductParam.FirstDispColumn+1)/2<ProductParam.FirstDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+1)/2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
												AddMsg(str);
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<ProductParam.FirstDispColumn;j++)
							{
								for(int n=0;n<(ProductParam.SecondDispColumn+1)/2;n++)
								{
									for(int l=0;l<ProductParam.ThirdDispColumn;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(n+(ProductParam.SecondDispColumn+1)/2<ProductParam.SecondDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+1)/2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<ProductParam.FirstDispColumn;j++)
							{
								for(int n=0;n<ProductParam.SecondDispColumn;n++)
								{
									for(int l=0;l<(ProductParam.ThirdDispColumn+1)/2;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(l+(ProductParam.ThirdDispColumn+1)/2<ProductParam.ThirdDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+1)/2])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<2;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void CCmdRun::ThreeValveRepaire(bool *bIsDispense)
{
	CString str;
	//if(!SynchronizeMoveXY(PDposting[0].Dx,PDposting[0].Dy,true))
	//{
	//	return;
	//}
	//if(!SynchronizeMoveZ(PDposting[0].Dz-ProductParam.dZupHigh,true))
	//{
	//	return;
	//}
	if(IsExitRun())
	{
		MoveToZSafety();
		return ;
	}
	if(ProductParam.IrregularMatrix)
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			for(int j=0;j<(ProductParam.IrregularColumn+2)/3;j++)
			{
				for(int i=0;i<ProductParam.IrregularRow;i++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+2)/3])
					{
						str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+2)/3);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(j+(ProductParam.IrregularColumn+2)/3*2<ProductParam.IrregularColumn)
					{
						if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+2)/3*2])
						{
							str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+2)/3*2);
							AddMsg(str);
							g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
							g_pFrm->m_CmdRun.ProductParam.DispFCount++;
						}
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					for(int i=0;i<3;i++)
					{
						RunDispFSelect[i] = false;
					}
				}
			}
		}
		else
		{
			for(int i=0;i<ProductParam.IrregularRow;i++)
			{
				for(int j=0;j<(ProductParam.IrregularColumn+2)/3;j++)
				{
					int nDisNumber = j+i*ProductParam.IrregularColumn;
					if(bIsDispense[nDisNumber])
					{
						str.Format("RunDisp:%d",nDisNumber);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+2)/3])
					{
						str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+2)/3);
						AddMsg(str);
						g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
						g_pFrm->m_CmdRun.ProductParam.DispFCount++;
					}
					if(j+(ProductParam.IrregularColumn+2)/3*2<ProductParam.IrregularColumn)
					{
						if(bIsDispense[nDisNumber+(ProductParam.IrregularColumn+2)/3*2])
						{
							str.Format("RunDisp:%d",nDisNumber+(ProductParam.IrregularColumn+2)/3*2);
							AddMsg(str);
							g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
							g_pFrm->m_CmdRun.ProductParam.DispFCount++;
						}
					}
					if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
					{
						m_bRepair = false;
						MoveToZSafety();
						m_tStatus = K_RUN_STS_STOP;
						Stop();
						return;
					}
					g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
					for(int i=0;i<3;i++)
					{
						RunDispFSelect[i] = false;
					}
				}
			}
		}
	}
	else
	{
		if(ProductParam.dispOrientation==COLUMN_DISP)
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int j=0;j<(ProductParam.FirstDispColumn+2)/3;j++)
				{
					for(int n=0;n<ProductParam.SecondDispColumn;n++)
					{
						for(int l=0;l<ProductParam.ThirdDispColumn;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											str.Format("RunDisp:%d",nDisNumber);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
										{
											str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(j+(ProductParam.FirstDispColumn+2)/3*2<ProductParam.FirstDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+2)/3*2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+2)/3*2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
												AddMsg(str);
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int j=0;j<ProductParam.FirstDispColumn;j++)
				{
					for(int n=0;n<(ProductParam.SecondDispColumn+2)/3;n++)
					{
						for(int l=0;l<ProductParam.ThirdDispColumn;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(n+(ProductParam.SecondDispColumn+2)/3*2<ProductParam.SecondDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+2)/3*2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int j=0;j<ProductParam.FirstDispColumn;j++)
				{
					for(int n=0;n<ProductParam.SecondDispColumn;n++)
					{
						for(int l=0;l<(ProductParam.ThirdDispColumn+2)/3;l++)
						{
							for(int i=0;i<ProductParam.FirstDispRow;i++)
							{
								for(int m=0;m<ProductParam.SecondDispRow;m++)
								{
									for(int k=0;k<ProductParam.ThirdDispRow;k++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+2)/3])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(l+(ProductParam.ThirdDispColumn+2)/3*2<ProductParam.ThirdDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*2])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if(ProductParam.FirstDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<(ProductParam.FirstDispColumn+2)/3;j++)
							{
								for(int n=0;n<ProductParam.SecondDispColumn;n++)
								{
									for(int l=0;l<ProductParam.ThirdDispColumn;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											str.Format("RunDisp:%d",nDisNumber);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
										{
											str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+2)/3*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
											AddMsg(str);
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(j+(ProductParam.FirstDispColumn+2)/3*2<ProductParam.FirstDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.FirstDispColumn+2)/3*2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												str.Format("RunDisp:%d",nDisNumber+(ProductParam.FirstDispColumn+2)/3*2*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn);
												AddMsg(str);
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else if(ProductParam.SecondDispColumn>1)
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<ProductParam.FirstDispColumn;j++)
							{
								for(int n=0;n<(ProductParam.SecondDispColumn+2)/3;n++)
								{
									for(int l=0;l<ProductParam.ThirdDispColumn;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+2)/3*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(n+(ProductParam.SecondDispColumn+2)/3*2<ProductParam.SecondDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.SecondDispColumn+2)/3*2*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				for(int i=0;i<ProductParam.FirstDispRow;i++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int k=0;k<ProductParam.ThirdDispRow;k++)
						{
							for(int j=0;j<ProductParam.FirstDispColumn;j++)
							{
								for(int n=0;n<ProductParam.SecondDispColumn;n++)
								{
									for(int l=0;l<(ProductParam.ThirdDispColumn+2)/3;l++)
									{
										int nDisNumber = l+k*ProductParam.ThirdDispColumn+n*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+m*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+
											j*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn+i*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
										if(bIsDispense[nDisNumber])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[0] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+2)/3])
										{
											g_pFrm->m_CmdRun.RunDispFSelect[1] = true;
											g_pFrm->m_CmdRun.ProductParam.DispFCount++;
										}
										if(l+(ProductParam.ThirdDispColumn+2)/3*2<ProductParam.ThirdDispColumn)
										{
											if(bIsDispense[nDisNumber+(ProductParam.ThirdDispColumn+2)/3*2])
											{
												g_pFrm->m_CmdRun.RunDispFSelect[2] = true;
												g_pFrm->m_CmdRun.ProductParam.DispFCount++;
											}
										}
										if(!SelectDispense(PDposting[nDisNumber].Dx,PDposting[nDisNumber].Dy,PDposting[nDisNumber].Dz))
										{
											m_bRepair = false;
											g_pFrm->m_CmdRun.AddMsg("SelectDispense Failed!");
											MoveToZSafety();
											m_tStatus = K_RUN_STS_STOP;
											Stop();
											return;
										}
										g_pFrm->m_CmdRun.ProductParam.DispFCount = 0;
										for(int i=0;i<3;i++)
										{
											RunDispFSelect[i] = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

bool CCmdRun::SpliceInspect(bool bSplice)
{
	CString str;
	tgPos tgStartPixel;
	bool *pDetectResult;
	double dFirstPixelX,dFirstPixelY,dSecondPixelX,dSecondPixelY,dThirdPixelX,dThirdPixelY;
	CRect rect;
	rect.left = theApp.m_tSysParam.BmpPadDetectROI.right - theApp.m_tSysParam.BmpPadDetectROI.Width()/10;
	rect.right = theApp.m_tSysParam.BmpPadDetectROI.right;
	rect.top = theApp.m_tSysParam.BmpPadDetectROI.top;
	rect.bottom = theApp.m_tSysParam.BmpPadDetectROI.top + theApp.m_tSysParam.BmpPadDetectROI.Height()/2;
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.FirstDispColumnD,ProductParam.FirstDispRowD,dFirstPixelX,dFirstPixelY);
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.SecondDispColumnD,ProductParam.SecondDispRowD,dSecondPixelX,dSecondPixelY);
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.ThirdDispColumnD,ProductParam.ThirdDispRowD,dThirdPixelX,dThirdPixelY);
	//if(pPadDetect!=NULL)
	//{
	//	delete[] pPadDetect;
	//	pPadDetect = NULL;
	//}
	//pPadDetect = new bool[nPadNumber];
	pDetectResult = new bool[m_nPadNumber];
	memset(pDetectResult,1,m_nPadNumber*sizeof(bool));
	//m_pMv->GotoSafeZPos();
	int nThirdNum = ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
	int nSecondNum = ProductParam.SecondDispRow*ProductParam.SecondDispColumn;
	if(!bSplice)
	{
		//SynchronizeMoveXY(ProductParam.tPadDetectPos[m_nChannelID].x,ProductParam.tPadDetectPos[m_nChannelID].y,ProductParam.FreeVal,ProductParam.FreeAcc,TRUE);
		//if(IsExitRun())
		//{
		//	return false;
		//}
		//m_pMv->Move(K_AXIS_ZA,ProductParam.tPadDetectPos[m_nChannelID].z,ProductParam.FreeVal,ProductParam.FreeAcc,true);
		m_pMv->SetOutput(theApp.m_tSysParam.outDetectLight,TRUE);
		CTimeUtil::Delay(long(ProductParam.dGrabImageDelay*1000));
		str.Format("start DetectSnap");
		m_pLog->log(str);
		if(!g_pView->m_ImgStatic.DetectSnap())
		{
			m_pMv->SetOutput(theApp.m_tSysParam.outDetectLight,FALSE);
			return false;
		}
		CString strFile;
		//strFile = g_pDoc->GetPadModelFile(m_nDetectImageIndex,false);
		//milApp.SaveFile(strFile.GetBuffer(strFile.GetLength()),true);
		//m_nDetectImageIndex++;
		m_pMv->SetOutput(theApp.m_tSysParam.outDetectLight,FALSE);
		str.Format("start GetPadModelFile");
		m_pLog->log(str);
		strFile = g_pDoc->GetPadModelFile(0);
		str.Format("start RestorePadModel");
		m_pLog->log(str);
		milApp.RestorePadModel(strFile.GetBuffer(strFile.GetLength()));
		str.Format("start SetPadSearchParam");
		m_pLog->log(str);
		milApp.SetPadSearchParam(theApp.m_tSysParam.BmpPadDetectAcceptance,theApp.m_tSysParam.BmpPadDetectAngle);
		str.Format("start SetPadModelWindow");
		m_pLog->log(str);
		milApp.SetPadModelWindow(theApp.m_tSysParam.BmpPadDetectLearnWin);
		str.Format("start SetPadSearchWindow");
		m_pLog->log(str);
		milApp.SetPadSearchWindow(rect);
		str.Format("start FindPadModels");
		m_pLog->log(str);
		if(!milApp.FindPadModels())
		{
			return false;
		}
		if(milApp.m_stPadResult.nResultNum>0)
		{
			tgStartPixel.x = milApp.m_stPadResult.dResultCenterX[0];
			tgStartPixel.y = milApp.m_stPadResult.dResultCenterY[0];
			for(int i=0;i<milApp.m_stPadResult.nResultNum;i++)
			{
				if(tgStartPixel.x<milApp.m_stPadResult.dResultCenterX[i])
				{
					tgStartPixel.x = milApp.m_stPadResult.dResultCenterX[i];
				}
				if(tgStartPixel.y>milApp.m_stPadResult.dResultCenterY[i])
				{
					tgStartPixel.y = milApp.m_stPadResult.dResultCenterY[i];
				}
			}
			for(int i=0;i<ProductParam.FirstDispRow;i++)
			{
				for(int j=0;j<ProductParam.FirstDispColumn;j++)
				{
					for(int m=0;m<ProductParam.SecondDispRow;m++)
					{
						for(int n=0;n<ProductParam.SecondDispColumn;n++)
						{
							for(int k=0;k<ProductParam.ThirdDispRow;k++)
							{
								for(int l=0;l<ProductParam.ThirdDispColumn;l++)
								{
									int temID = l + k*ProductParam.ThirdDispColumn + n*nThirdNum + m*ProductParam.SecondDispColumn*nThirdNum +
										j*nSecondNum*nThirdNum + i*ProductParam.FirstDispColumn*nSecondNum*nThirdNum;
									double dPixelX,dPixelY;
									double dDistanceX = j*ProductParam.FirstDispColumnD + n*ProductParam.SecondDispColumnD + l*ProductParam.ThirdDispColumnD;
									double dDistanceY = i*ProductParam.FirstDispRowD + m*ProductParam.SecondDispRowD + k*ProductParam.ThirdDispRowD;
									theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(dDistanceX,dDistanceY,dPixelX,dPixelY);
									//rect.left = tgStartPixel.x - j*dFirstPixelX - n*dSecondPixelX - l*dThirdPixelX - dThirdPixelX/2;
									//rect.right = tgStartPixel.x - j*dFirstPixelX - n*dSecondPixelX - l*dThirdPixelX + dThirdPixelX/2;
									//rect.top = tgStartPixel.y + i*dFirstPixelY + m*dSecondPixelY + k*dThirdPixelY - dThirdPixelY/2;
									//rect.bottom = tgStartPixel.y + i*dFirstPixelY + m*dSecondPixelY + k*dThirdPixelY + dThirdPixelY/2;
									rect.left = tgStartPixel.x - dPixelX - dThirdPixelX/2;
									rect.right = tgStartPixel.x - dPixelX + dThirdPixelX/2;
									rect.top = tgStartPixel.y + dPixelY - dThirdPixelY/2;
									rect.bottom = tgStartPixel.y + dPixelY + dThirdPixelY/2;
									milApp.SetPadSearchWindow(rect);
									if(!milApp.FindPadModels())
									{
										delete[] pDetectResult;
										pDetectResult = NULL;
										return false;
									}
									if(milApp.m_stPadResult.nResultNum>0)
									{
										//pPadDetect[temID] = true;
										pDetectResult[temID] = true;
									}
									else
									{
										pDetectResult[temID] = false;
									}
									CTimeUtil::Delay(5);
									str.Format("Pad检测：第%d检测完成",temID);
									m_pLog->log(str);
								}
							}
						}
					}
				}
			}
		}
	}
	else
	{
		double dDistanceX = 0.0;
		double dDistanceY = 0.0;
		int nStartColumn = 0;
		int nEndColumn = 0;
		theApp.m_tSysParam.BmpPadDetectCalibration.ConvertPixelToTable(theApp.m_tSysParam.BmpPadDetectROI.Width(),theApp.m_tSysParam.BmpPadDetectROI.Height(),dDistanceX,dDistanceY);
		int nIndex = int(dFirstPixelX*ProductParam.FirstDispColumn+theApp.m_tSysParam.BmpPadDetectROI.Width())/theApp.m_tSysParam.BmpPadDetectROI.Width();
		for(int i=0;i<nIndex;i++)
		{
			if(!SynchronizeMoveXY(ProductParam.tPadDetectPos.x+i*dDistanceX,ProductParam.tPadDetectPos.y,TRUE))
			{
				return false;
			}
			if(!SynchronizeMoveZ(ProductParam.tPadDetectPos.z,ProductParam.FreeVal,ProductParam.FreeAcc,TRUE))
			{
				return false;
			}
			m_pMv->SetOutput(theApp.m_tSysParam.outDetectLight,TRUE);
			Sleep(ProductParam.dGrabImageDelay*1000);
			if(!g_pView->m_ImgStatic.DetectSnap())
			{
				return false;
			}
			m_pMv->SetOutput(theApp.m_tSysParam.outDetectLight,FALSE);
			if(!SplicePadDetection(pDetectResult/*pPadDetect*/,nStartColumn,nEndColumn))
			{
				if(nEndColumn>=ProductParam.ThirdDispColumn*ProductParam.SecondDispColumn*ProductParam.FirstDispColumn)
				{
					break;
				}
				delete[] pDetectResult;
				pDetectResult = NULL;
				return false;
			}
			nStartColumn = nEndColumn;
		}
	}
	if(m_pTransitionDetect==NULL)
	{
		m_pTransitionDetect = new bool[m_nPadNumber];
	}
	memcpy(m_pTransitionDetect,pDetectResult,sizeof(bool)*m_nPadNumber);
	//for(int i=0;i<nPadNumber;i++)
	//{
	//	m_pTransitionDetect[i] = pDetectResult[i];
	//}
	delete[] pDetectResult;
	pDetectResult = NULL;
	return true;
}

bool CCmdRun::SplicePadDetection(bool *pResult,int nStartColumn,int &nEndColumn)
{
	CString str;
	tgPos tgStartPixel;
	double dFirstPixelX,dFirstPixelY,dSecondPixelX,dSecondPixelY,dThirdPixelX,dThirdPixelY;
	int nColumn = nStartColumn;
	int nFirstRow,nFirstColumn,nSecondRow,nSecondColumn,nThirdRow,nThirdColumn;
	nFirstColumn = nStartColumn/(g_pFrm->m_CmdRun.ProductParam.SecondDispColumn*g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn);
	nSecondColumn = nStartColumn/g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn%g_pFrm->m_CmdRun.ProductParam.SecondDispColumn;
	nThirdColumn = nStartColumn%g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn;
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.FirstDispColumnD,ProductParam.FirstDispRowD,dFirstPixelX,dFirstPixelY);
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.SecondDispColumnD,ProductParam.SecondDispRowD,dSecondPixelX,dSecondPixelY);
	theApp.m_tSysParam.BmpPadDetectCalibration.ConvertTableToPixel(ProductParam.ThirdDispColumnD,ProductParam.ThirdDispRowD,dThirdPixelX,dThirdPixelY);
	CRect rect;
	rect.left = theApp.m_tSysParam.BmpPadDetectROI.right - theApp.m_tSysParam.BmpPadDetectROI.Width()/5;
	rect.right = theApp.m_tSysParam.BmpPadDetectROI.right;
	rect.top = theApp.m_tSysParam.BmpPadDetectROI.top - theApp.m_tSysParam.BmpPadDetectROI.Height()/2;
	rect.bottom = theApp.m_tSysParam.BmpPadDetectROI.top + theApp.m_tSysParam.BmpPadDetectROI.Height()/2;
	CString strFile = g_pDoc->GetPadModelFile(0);
	milApp.RestorePadModel(strFile.GetBuffer(strFile.GetLength()));
	milApp.SetPadSearchParam(theApp.m_tSysParam.BmpPadDetectAcceptance,theApp.m_tSysParam.BmpPadDetectAngle);
	milApp.SetPadModelWindow(theApp.m_tSysParam.BmpPadDetectLearnWin);
	milApp.SetPadSearchWindow(rect);
	if(!milApp.FindPadModels())
	{
		return false;
	}
	if(milApp.m_stPadResult.nResultNum==0)
	{
		return false;
	}
	else if(milApp.m_stPadResult.nResultNum>0)
	{
		tgStartPixel.x = milApp.m_stPadResult.dResultCenterX[0];
		tgStartPixel.y = milApp.m_stPadResult.dResultCenterY[0];
		for(int i=0;i<milApp.m_stPadResult.nResultNum;i++)
		{
			if(tgStartPixel.x<milApp.m_stPadResult.dResultCenterX[i])
			{
				tgStartPixel.x = milApp.m_stPadResult.dResultCenterX[i];
			}
			if(tgStartPixel.y>milApp.m_stPadResult.dResultCenterY[i])
			{
				tgStartPixel.y = milApp.m_stPadResult.dResultCenterY[i];
			}
		}
		if(tgStartPixel.y<rect.bottom - dThirdPixelY)
		{
			tgStartPixel.y = rect.bottom - dThirdPixelY/2;
		}
		if(tgStartPixel.x<rect.left - dThirdPixelX)
		{
			tgStartPixel.x = rect.left - dThirdPixelX/2;
		}
		rect.bottom = theApp.m_tSysParam.BmpPadDetectROI.bottom;
		int nThirdNum = g_pFrm->m_CmdRun.ProductParam.ThirdDispRow*g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn;
		int nSecondNum = g_pFrm->m_CmdRun.ProductParam.SecondDispRow*g_pFrm->m_CmdRun.ProductParam.SecondDispColumn;
		double dRowDistance = dThirdPixelX;
		for(rect.right = long(tgStartPixel.x + dThirdPixelX/2),rect.left = long(tgStartPixel.x - dThirdPixelX/2);
			(rect.left+rect.right)/2>theApp.m_tSysParam.BmpPadDetectROI.left;rect.left-=long(dRowDistance),rect.right-=long(dRowDistance))
		{
			if(rect.left<0)
			{
				rect.left = 0;
			}
			if(rect.right>=IMAGEWIDTH1)
			{
				rect.right = IMAGEWIDTH1-1;
			}
			if(nFirstColumn>=ProductParam.FirstDispColumn||nSecondColumn>=ProductParam.SecondDispColumn||
				nThirdColumn>=ProductParam.ThirdDispColumn)
			{
				break;
			}
			milApp.SetPadSearchWindow(rect);
			if(!milApp.FindPadModels())
			{
				return false;
			}
			if(milApp.m_stPadResult.nResultNum==0)
			{
				return false;
			}
			for(int i=0;i<milApp.m_stPadResult.nResultNum;i++)
			{
				int nIndex = int((milApp.m_stPadResult.dResultCenterY[i]-tgStartPixel.y+dThirdPixelY/2)/dFirstPixelY);
				nFirstRow = nIndex;
				nSecondRow = int((milApp.m_stPadResult.dResultCenterY[i]-tgStartPixel.y-nFirstRow*dFirstPixelY+dThirdPixelY/2)/dSecondPixelY);
				nThirdRow = int((milApp.m_stPadResult.dResultCenterY[i]-tgStartPixel.y-nFirstRow*dFirstPixelY-nSecondRow*dSecondPixelY+dThirdPixelY/2)/dThirdPixelY);
				if(nFirstRow>=g_pFrm->m_CmdRun.ProductParam.FirstDispRow||nSecondRow>=g_pFrm->m_CmdRun.ProductParam.SecondDispRow||
					nThirdRow>=g_pFrm->m_CmdRun.ProductParam.ThirdDispRow)
				{
					break;
				}
				else
				{
					nIndex = nFirstRow*ProductParam.FirstDispColumn*nSecondNum*nThirdNum+nFirstColumn*nSecondNum*nThirdNum+
						nSecondRow*ProductParam.SecondDispColumn*nThirdNum+nSecondColumn*nThirdNum+nThirdRow*ProductParam.ThirdDispColumn+nThirdColumn;
					pResult[nIndex] = true;
				}
			}
			nThirdColumn++;
			nColumn++;
			dRowDistance = dThirdPixelX;
			if(nThirdColumn>=g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn)
			{
				nThirdColumn = 0;
				nSecondColumn++;
				dRowDistance = dSecondPixelX - (g_pFrm->m_CmdRun.ProductParam.ThirdDispColumn-1)*dThirdPixelX;
				if(nSecondColumn>=g_pFrm->m_CmdRun.ProductParam.SecondDispColumn)
				{
					nSecondColumn = 0;
					nFirstColumn++;
					dRowDistance = dFirstPixelX - (g_pFrm->m_CmdRun.ProductParam.SecondDispColumn-1)*dSecondPixelX;
					if(nFirstColumn>=g_pFrm->m_CmdRun.ProductParam.FirstDispColumn)
					{
						break;
					}
				}
			}
		}
	}
	nEndColumn = nColumn;

	return true;
}

bool CCmdRun::ReadContactSensorValue(double *pValue)
{
	CString str;
	char szHeight[5];
	szHeight[0] = 0x4d;
	szHeight[1] = 0x30;
	szHeight[2] = 0x0d;
	szHeight[3] = 0x0a;
	szHeight[4] = '\0';
	*pValue = theApp.m_Serial.ReadData(szHeight,1,KEYENCE_IL);
	return true;
}

bool CCmdRun::ReadHeightSensorValue(double *pValue)
{
	//if(HEIGHT_SENSOR_PANASONIC == theApp.m_tSysParam.heightSensorType)
	//{
	//	CString str;
	//	char szHeight[11];
	//	szHeight[0] = 0x25;
	//	szHeight[1] = 0x30;
	//	szHeight[2] = 0x31;
	//	szHeight[3] = 0x23;
	//	szHeight[4] = 0x52;
	//	szHeight[5] = 0x4D;
	//	szHeight[6] = 0x44;
	//	szHeight[7] = 0x2A;
	//	szHeight[8] = 0x2A;
	//	szHeight[9] = 0x0D;
	//	szHeight[10] = '\0';
	//	*pValue = theApp.m_Serial.ReadData(szHeight,2,PANASONIC_HL);
	//}
	//else if(HEIGHT_SENSOR_MLD == theApp.m_tSysParam.heightSensorType)
	//{

	//}
	CString str;
	char szHeight[9];
	szHeight[0] = 0x02;
	szHeight[1] = 0x4D;
	szHeight[2] = 0x45;
	szHeight[3] = 0x41;
	szHeight[4] = 0x53;
	szHeight[5] = 0x55;
	szHeight[6] = 0x52;
	szHeight[7] = 0x45;
	szHeight[8] = 0x03;
	//szHeight[9] = '\0';
	*pValue = theApp.m_Serial.ReadData(szHeight,1,MLD_HS);
	return true;
}

void CCmdRun::ClearPadDetect()
{
	if(m_pTransitionDetect!=NULL)
	{
		memset(m_pTransitionDetect,1,m_nPadNumber*sizeof(bool));
	}
	if(m_pPadDetect!=NULL)
	{
		memset(m_pPadDetect,1,m_nPadNumber*sizeof(bool));
	}
}

void CCmdRun::CopyPadDtect()
{
	if(m_pTransitionDetect!=NULL&&m_pPadDetect!=NULL)
	{
		memcpy(m_pPadDetect,m_pTransitionDetect,m_nPadNumber*sizeof(bool));
	}
}

void CCmdRun::InitPadDetect()
{
	if(ProductParam.IrregularMatrix)
	{
		m_nPadNumber = ProductParam.IrregularRow*ProductParam.IrregularColumn;
	}
	else
	{
		m_nPadNumber = ProductParam.FirstDispRow*ProductParam.FirstDispColumn*ProductParam.SecondDispRow*ProductParam.SecondDispColumn*ProductParam.ThirdDispRow*ProductParam.ThirdDispColumn;
	}
	if(m_pTransitionDetect!=NULL)
	{
		delete[] m_pTransitionDetect;
		m_pTransitionDetect = NULL;
	}
	if(m_pPadDetect!=NULL)
	{
		delete[] m_pPadDetect;
		m_pPadDetect = NULL;
	}
	m_pTransitionDetect = new bool[m_nPadNumber];
	m_pPadDetect = new bool[m_nPadNumber];
	memset(m_pTransitionDetect,1,m_nPadNumber*sizeof(bool));
	memset(m_pPadDetect,1,m_nPadNumber*sizeof(bool));
}